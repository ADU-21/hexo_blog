<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Adu&#39;s blog</title>
  <subtitle>life is beautiful</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://adu.404nf.cn/"/>
  <updated>2016-06-15T13:45:05.000Z</updated>
  <id>http://adu.404nf.cn/</id>
  
  <author>
    <name>Luke Du</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ansible学习小记</title>
    <link href="http://adu.404nf.cn/2016/06/15/ansible%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/"/>
    <id>http://adu.404nf.cn/2016/06/15/ansible学习小记/</id>
    <published>2016-06-15T12:30:46.000Z</published>
    <updated>2016-06-15T13:45:05.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Ansible是什么&quot;&gt;&lt;a href=&quot;#Ansible是什么&quot; class=&quot;headerlink&quot; title=&quot;Ansible是什么&quot;&gt;&lt;/a&gt;Ansible是什么&lt;/h1&gt;&lt;p&gt;借助官网上的一句话，ansible is a simple IT automation, 即ansible 是用于IT自动化管理的一个工具&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;诞生背景&quot;&gt;&lt;a href=&quot;#诞生背景&quot; class=&quot;headerlink&quot; title=&quot;诞生背景&quot;&gt;&lt;/a&gt;诞生背景&lt;/h2&gt;&lt;p&gt;在传统小规模开发中，我们在开发机上开发，在Linux服务器上部署，整个过程只需要一个人操作，运维既是在开发机上开发，测试，然后选个凌晨两三点的时间把打包好的字节码文件复制到服务器上，这种开发生产环境用不着自动化配置管理工具。&lt;br&gt;但当我们的开发升级到数十个人的团队，服务器多达数台，这种操作方式的弊端就会显露出来，一是多人协作带来的开发环境和生产环境不一致导致开发环境可用的代码到了生产环境（服务器）上变得不可用，二是多台服务器的重复配置带来的工作内容的冗余，一定程度上降低了我们的生产效率。这种时候运维的角色开始逐渐显现出来。&lt;br&gt;这种级别的运维，通常只需要一些python或者bash脚本就可以实现自动化部署，配置服务器等功能。再加上规范的文档，基本可以解决团队之间的沟通问题。&lt;br&gt;但是随着产品迭代周期的加长，团队的扩大，问题也随之而来，实践中脚本的不易维护，程序员们不愿意更新文档等问题逐渐暴露出来。于是市面上诞生了一批以”代码即文档”为核心思想的自动化配置管理工具，Ansible就是其中之一。&lt;/p&gt;
&lt;h2 id=&quot;操作方法&quot;&gt;&lt;a href=&quot;#操作方法&quot; class=&quot;headerlink&quot; title=&quot;操作方法&quot;&gt;&lt;/a&gt;操作方法&lt;/h2&gt;&lt;p&gt;ansible主要由几个部分租成，其核心是inventory文件和yaml编写的playbook，按照&lt;a href=&quot;http://docs.ansible.com/ansible/playbooks_best_practices.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最佳实践&lt;/a&gt;的标准，一个完整的ansible文件应该具有以下结构：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;production                # inventory file for production servers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;staging                   # inventory file for staging environment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;group_vars/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   group1                 # here we assign variables to particular groups&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   group2                 # &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host_vars/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   hostname1              # if systems need specific variables, put them here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   hostname2              # &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;library/                  # if any custom modules, put them here (optional)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter_plugins/           # if any custom filter plugins, put them here (optional)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;site.yml                  # master playbook&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webservers.yml            # playbook for webserver tier&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dbservers.yml             # playbook for dbserver tier&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;roles/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    common/               # this hierarchy represents a &amp;quot;role&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tasks/            #&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            main.yml      #  &amp;lt;-- tasks file can include smaller files if warranted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        handlers/         #&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            main.yml      #  &amp;lt;-- handlers file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        templates/        #  &amp;lt;-- files for use with the template resource&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ntp.conf.j2   #  &amp;lt;------- templates end in .j2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        files/            #&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bar.txt       #  &amp;lt;-- files for use with the copy resource&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            foo.sh        #  &amp;lt;-- script files for use with the script resource&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vars/             #&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            main.yml      #  &amp;lt;-- variables associated with this role&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        defaults/         #&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            main.yml      #  &amp;lt;-- default lower priority variables for this role&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        meta/             #&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            main.yml      #  &amp;lt;-- role dependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webtier/              # same kind of structure as &amp;quot;common&amp;quot; was above, done for the webtier role&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    monitoring/           # &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fooapp/               # &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我挑几个重点讲：&lt;br&gt;site.yml是ensile playbook的入口文件，执行该文件会依次找到inventory文件，找到hosts组，然后ssh到目标机器组的host上，开始执行task。&lt;br&gt;task是通过调用ansible模块的方式，在远程设备上执行命令来实现配置的，所以理论上可以通过命令行操作的操作，ansible都可以执行。&lt;br&gt;以下为一个task:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-name: install npm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; sudo: yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; yum: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	name: npm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	state: present&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该task使用了ansible的yum模块，用于检测远端设备上是否部署了nam，如果没有部署，ansible会进行yum install nam 操作进行安装，安装成功，显示ok，失败则抛出异常并中断ansible执行。&lt;/p&gt;
&lt;h2 id=&quot;几款自动化配置工具&quot;&gt;&lt;a href=&quot;#几款自动化配置工具&quot; class=&quot;headerlink&quot; title=&quot;几款自动化配置工具&quot;&gt;&lt;/a&gt;几款自动化配置工具&lt;/h2&gt;&lt;p&gt;我没有使用过其他自动化配置管理工具，在此仅对ansible做进一步介绍&lt;br&gt;ensile的底层实现使用python，在Linux上支持较好，windows支持较弱，因为生产环境和测试环境通常都是Linux操作系统，所以这点无伤大雅。&lt;br&gt;你可以理解成Ansible就是对一批python脚本的封装,你只需要更改一些yams文件就可以达到控制服务器配置版本信息的目的，关于yams语法：&lt;a href=&quot;http://www.ansible.com.cn/docs/YAMLSyntax.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ansible.com.cn/docs/YAMLSyntax.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h1&gt;&lt;h1 id=&quot;Ansible的不足之处&quot;&gt;&lt;a href=&quot;#Ansible的不足之处&quot; class=&quot;headerlink&quot; title=&quot;Ansible的不足之处&quot;&gt;&lt;/a&gt;Ansible的不足之处&lt;/h1&gt;&lt;p&gt;未完待续。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ansible是什么&quot;&gt;&lt;a href=&quot;#Ansible是什么&quot; class=&quot;headerlink&quot; title=&quot;Ansible是什么&quot;&gt;&lt;/a&gt;Ansible是什么&lt;/h1&gt;&lt;p&gt;借助官网上的一句话，ansible is a simple IT automation, 即ansible 是用于IT自动化管理的一个工具&lt;br&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://adu.404nf.cn/categories/Devops/"/>
    
    
      <category term="opration" scheme="http://adu.404nf.cn/tags/opration/"/>
    
      <category term="ansible" scheme="http://adu.404nf.cn/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>Systemd</title>
    <link href="http://adu.404nf.cn/2016/06/05/Systemd/"/>
    <id>http://adu.404nf.cn/2016/06/05/Systemd/</id>
    <published>2016-06-05T07:55:33.000Z</published>
    <updated>2016-06-05T08:25:55.000Z</updated>
    
    <content type="html">&lt;p&gt;Systemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h1&gt;&lt;p&gt;历史上，Linux 的启动一直采用&lt;code&gt;init&lt;/code&gt;进程。&lt;br&gt;下面的命令用来启动服务。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo /etc/init.d/apache2 start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ service apache2 start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种方法有两个缺点。&lt;br&gt;一是启动时间长。init进程是串行启动，只有前一个进程启动完，才会启动下一个进程。&lt;br&gt;二是启动脚本复杂。init进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长。&lt;/p&gt;
&lt;h1 id=&quot;Systemd概述&quot;&gt;&lt;a href=&quot;#Systemd概述&quot; class=&quot;headerlink&quot; title=&quot;Systemd概述&quot;&gt;&lt;/a&gt;Systemd概述&lt;/h1&gt;&lt;p&gt;Systemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套完整的解决方案。&lt;br&gt;根据 Linux 惯例，字母d是守护进程（daemon）的缩写。 Systemd 这个名字的含义，就是它要守护整个系统。&lt;br&gt;使用了 Systemd，就不需要再用init了。Systemd 取代了initd，成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl --version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的命令查看 Systemd 的版本。&lt;br&gt;Systemd 的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。事实上，现在还有很多人反对使用 Systemd，理由就是它过于复杂，与操作系统的其他部分强耦合，违反”keep simple, keep stupid”的Unix 哲学。&lt;br&gt;&lt;img src=&quot;http://www.ruanyifeng.com/blogimg/asset/2016/bg2016030703.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;（上图为 Systemd 架构图）&lt;/p&gt;
&lt;h1 id=&quot;系统管理&quot;&gt;&lt;a href=&quot;#系统管理&quot; class=&quot;headerlink&quot; title=&quot;系统管理&quot;&gt;&lt;/a&gt;系统管理&lt;/h1&gt;&lt;p&gt;Systemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面。&lt;/p&gt;
&lt;h2 id=&quot;systemctl&quot;&gt;&lt;a href=&quot;#systemctl&quot; class=&quot;headerlink&quot; title=&quot;systemctl&quot;&gt;&lt;/a&gt;systemctl&lt;/h2&gt;&lt;p&gt;systemctl是 Systemd 的主命令，用于管理系统。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 重启系统&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl reboot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 关闭系统，切断电源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl poweroff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# CPU停止工作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl halt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 暂停系统&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl suspend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 让系统进入冬眠状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl hibernate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 让系统进入交互式休眠状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl hybrid-sleep&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 启动进入救援状态（单用户状态）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl rescue&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;systemd-analyze&quot;&gt;&lt;a href=&quot;#systemd-analyze&quot; class=&quot;headerlink&quot; title=&quot;systemd-analyze&quot;&gt;&lt;/a&gt;systemd-analyze&lt;/h2&gt;&lt;p&gt;systemd-analyze命令用于查看启动耗时。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 查看启动耗时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemd-analyze                                                                                       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看每个服务的启动耗时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemd-analyze blame&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 显示瀑布状的启动过程流&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemd-analyze critical-chain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 显示指定服务的启动流&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemd-analyze critical-chain atd.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;hostnamectl&quot;&gt;&lt;a href=&quot;#hostnamectl&quot; class=&quot;headerlink&quot; title=&quot;hostnamectl&quot;&gt;&lt;/a&gt;hostnamectl&lt;/h2&gt;&lt;p&gt;hostnamectl命令用于查看当前主机的信息。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 显示当前主机的信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hostnamectl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 设置主机名。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo hostnamectl set-hostname rhel7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;localectl&quot;&gt;&lt;a href=&quot;#localectl&quot; class=&quot;headerlink&quot; title=&quot;localectl&quot;&gt;&lt;/a&gt;localectl&lt;/h2&gt;&lt;p&gt;localectl命令用于查看本地化设置。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 查看本地化设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ localectl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 设置本地化参数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo localectl set-locale LANG=en_GB.utf8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo localectl set-keymap en_GB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;timedatectl&quot;&gt;&lt;a href=&quot;#timedatectl&quot; class=&quot;headerlink&quot; title=&quot;timedatectl&quot;&gt;&lt;/a&gt;timedatectl&lt;/h2&gt;&lt;p&gt;timedatectl命令用于查看当前时区设置。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 查看当前时区设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ timedatectl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 显示所有可用的时区&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ timedatectl list-timezones                                                                                   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 设置当前时区&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo timedatectl set-timezone America/New_York&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo timedatectl set-time YYYY-MM-DD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo timedatectl set-time HH:MM:SS&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;loginctl&quot;&gt;&lt;a href=&quot;#loginctl&quot; class=&quot;headerlink&quot; title=&quot;loginctl&quot;&gt;&lt;/a&gt;loginctl&lt;/h2&gt;&lt;p&gt;loginctl命令用于查看当前登录的用户。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 列出当前session&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ loginctl list-sessions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 列出当前登录用户&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ loginctl list-users&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 列出显示指定用户的信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ loginctl show-user ruanyf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Until&quot;&gt;&lt;a href=&quot;#Until&quot; class=&quot;headerlink&quot; title=&quot;Until&quot;&gt;&lt;/a&gt;Until&lt;/h1&gt;&lt;h2 id=&quot;含义&quot;&gt;&lt;a href=&quot;#含义&quot; class=&quot;headerlink&quot; title=&quot;含义&quot;&gt;&lt;/a&gt;含义&lt;/h2&gt;&lt;p&gt;Systemd 可以管理所有系统资源。不同的资源统称为 Unit（单位）。&lt;br&gt;Unit 一共分成12种。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Service unit：系统服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Target unit：多个 Unit 构成的一个组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Device Unit：硬件设备&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mount Unit：文件系统的挂载点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Automount Unit：自动挂载点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Path Unit：文件或路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Scope Unit：不是由 Systemd 启动的外部进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Slice Unit：进程组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Snapshot Unit：Systemd 快照，可以切回某个快照&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Socket Unit：进程间通信的 socket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Swap Unit：swap 文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Timer Unit：定时器&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;systemctl list-units&lt;/code&gt;命令可以查看当前系统的所有 Unit 。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 列出正在运行的 Unit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl list-units&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 列出所有Unit，包括没有找到配置文件的或者启动失败的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl list-units --all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 列出所有没有运行的 Unit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl list-units --all --state=inactive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 列出所有加载失败的 Unit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl list-units --failed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 列出所有正在运行的、类型为 service 的 Unit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl list-units --type=service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Unit的状态&quot;&gt;&lt;a href=&quot;#Unit的状态&quot; class=&quot;headerlink&quot; title=&quot;Unit的状态&quot;&gt;&lt;/a&gt;Unit的状态&lt;/h2&gt;&lt;p&gt;&lt;code&gt;systemctl status&lt;/code&gt;命令用于查看系统状态和单个 Unit 的状态。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 显示系统状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 显示单个 Unit 的状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sysystemctl status bluetooth.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 显示远程主机的某个 Unit 的状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl -H root@rhel7.example.com status httpd.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了&lt;code&gt;status&lt;/code&gt;命令，&lt;code&gt;systemctl&lt;/code&gt;还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 显示某个 Unit 是否正在运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl is-active application.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 显示某个 Unit 是否处于启动失败状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl is-failed application.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 显示某个 Unit 服务是否建立了启动链接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl is-enabled application.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Unit管理&quot;&gt;&lt;a href=&quot;#Unit管理&quot; class=&quot;headerlink&quot; title=&quot;Unit管理&quot;&gt;&lt;/a&gt;Unit管理&lt;/h2&gt;&lt;p&gt;对于用户来说，最常用的是下面这些命令，用于启动和停止 Unit（主要是 service）。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 立即启动一个服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl start apache.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 立即停止一个服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl stop apache.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 重启一个服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl restart apache.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 杀死一个服务的所有子进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl kill apache.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 重新加载一个服务的配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl reload apache.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 重载所有修改过的配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl daemon-reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 显示某个 Unit 的所有底层参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl show httpd.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 显示某个 Unit 的指定属性的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl show -p CPUShares httpd.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 设置某个 Unit 的指定属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl set-property httpd.service CPUShares=500&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;依赖关系&quot;&gt;&lt;a href=&quot;#依赖关系&quot; class=&quot;headerlink&quot; title=&quot;依赖关系&quot;&gt;&lt;/a&gt;依赖关系&lt;/h2&gt;&lt;p&gt;Unit 之间存在依赖关系：A 依赖于 B，就意味着 Systemd 在启动 A 的时候，同时会去启动 B。&lt;br&gt;&lt;code&gt;systemctl list-dependencies&lt;/code&gt;命令列出一个 Unit 的所有依赖。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl list-dependencies nginx.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面命令的输出结果之中，有些依赖是 Target 类型（详见下文），默认不会展开显示。如果要展开 Target，就需要使用&lt;code&gt;--all&lt;/code&gt;参数。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl list-dependencies --all nginx.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Unit配置文件&quot;&gt;&lt;a href=&quot;#Unit配置文件&quot; class=&quot;headerlink&quot; title=&quot;Unit配置文件&quot;&gt;&lt;/a&gt;Unit配置文件&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。&lt;br&gt;Systemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。&lt;br&gt;&lt;code&gt;systemctl enable&lt;/code&gt;命令用于在上面两个目录之间，建立符号链接关系。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl enable clamd@scan.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 等同于&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo ln -s &amp;apos;/usr/lib/systemd/system/clamd@scan.service&amp;apos; &amp;apos;/etc/systemd/system/m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果配置文件里面设置了开机启动，&lt;code&gt;systemctl enable&lt;/code&gt;命令相当于激活开机启动。&lt;br&gt;与之对应的，&lt;code&gt;systemctl disable&lt;/code&gt;命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl disable clamd@scan.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。&lt;/p&gt;
&lt;h2 id=&quot;配置文件的状态&quot;&gt;&lt;a href=&quot;#配置文件的状态&quot; class=&quot;headerlink&quot; title=&quot;配置文件的状态&quot;&gt;&lt;/a&gt;配置文件的状态&lt;/h2&gt;&lt;p&gt;&lt;code&gt;systemctl list-unit-files&lt;/code&gt;命令用于列出所有配置文件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 列出所有配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl list-unit-files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 列出指定类型的配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl list-unit-files --type=service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个命令会输出一个列表。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl list-unit-files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UNIT FILE              STATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chronyd.service        enabled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clamd@.service         static&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clamd@scan.service     disabled&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个列表显示每个配置文件的状态，一共有四种。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;enabled：已建立启动链接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;disabled：没建立启动链接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static：该配置文件没有[Install]部分（无法执行），只能作为其他配置文件的依赖&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;masked：该配置文件被禁止建立启动链接&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意，从配置文件的状态无法看出，该 Unit 是否正在运行。这必须执行前面提到的&lt;code&gt;systemctl status&lt;/code&gt;命令。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl status bluetooth.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生效。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl daemon-reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl restart httpd.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置文件的格式&quot;&gt;&lt;a href=&quot;#配置文件的格式&quot; class=&quot;headerlink&quot; title=&quot;配置文件的格式&quot;&gt;&lt;/a&gt;配置文件的格式&lt;/h2&gt;&lt;p&gt;配置文件就是普通的文本文件，可以用文本编辑器打开。&lt;br&gt;&lt;code&gt;systemctl cat&lt;/code&gt;命令可以查看配置文件的内容。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl cat atd.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Unit]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Description=ATD daemon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type=forking&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStart=/usr/bin/atd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Install]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WantedBy=multi-user.target&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从上面的输出可以看到，配置文件分成几个区块。每个区块的第一行，是用方括号表示的区别名，比如[Unit]。注意，配置文件的区块名和字段名，都是大小写敏感的。&lt;br&gt;每个区块内部是一些等号连接的键值对。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Section]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Directive1=value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Directive2=value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;. . .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意，键值对的等号两侧不能有空格。&lt;/p&gt;
&lt;h2 id=&quot;配置文件的区块&quot;&gt;&lt;a href=&quot;#配置文件的区块&quot; class=&quot;headerlink&quot; title=&quot;配置文件的区块&quot;&gt;&lt;/a&gt;配置文件的区块&lt;/h2&gt;&lt;p&gt;[Unit]区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Description：简短描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Documentation：文档地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Condition...：当前 Unit 运行必须满足的条件，否则不会运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Assert...：当前 Unit 运行必须满足的条件，否则会报启动失败&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Alias：当前 Unit 可用于启动的别名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Type：定义启动时的进程行为。它有以下几种值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type=simple：默认值，执行ExecStart指定的命令，启动主进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type=dbus：当前服务通过D-Bus启动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type=idle：若有其他任务执行完毕，当前服务才会运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStart：启动当前服务的命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStartPre：启动当前服务之前执行的命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStartPost：启动当前服务之后执行的命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecReload：重启当前服务时执行的命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStop：停止当前服务时执行的命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecStopPost：停止当其服务之后执行的命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RestartSec：自动重启当前服务间隔的秒数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Environment：指定环境变量&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Unit 配置文件的完整字段清单，请参考&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.unit.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;Target&quot;&gt;&lt;a href=&quot;#Target&quot; class=&quot;headerlink&quot; title=&quot;Target&quot;&gt;&lt;/a&gt;Target&lt;/h1&gt;&lt;p&gt;启动计算机的时候，需要启动大量的 Unit。如果每一次启动，都要一一写明本次启动需要哪些 Unit，显然非常不方便。Systemd 的解决方案就是 Target。&lt;br&gt;简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于”状态点”，启动某个 Target 就好比启动到某种状态。&lt;br&gt;传统的init启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 查看当前系统的所有 Target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl list-unit-files --type=target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看一个 Target 包含的所有 Unit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl list-dependencies multi-user.target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看启动时的默认 Target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl get-default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 设置启动时的默认 Target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl set-default multi-user.target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 切换 Target 时，默认不关闭前一个 Target 启动的进程，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# systemctl isolate 命令改变这种行为，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 关闭前一个 Target 里面所有不属于后一个 Target 的进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl isolate multi-user.target&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Target 与 传统 RunLevel 的对应关系如下。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Traditional runlevel      New target name     Symbolically linked to...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Runlevel 0           |    runlevel0.target -&amp;gt; poweroff.target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Runlevel 1           |    runlevel1.target -&amp;gt; rescue.target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Runlevel 2           |    runlevel2.target -&amp;gt; multi-user.target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Runlevel 3           |    runlevel3.target -&amp;gt; multi-user.target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Runlevel 4           |    runlevel4.target -&amp;gt; multi-user.target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Runlevel 5           |    runlevel5.target -&amp;gt; graphical.target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Runlevel 6           |    runlevel6.target -&amp;gt; reboot.target&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它与init进程的主要差别如下。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;（1）默认的 RunLevel（在/etc/inittab文件设置）现在被默认的 Target 取代，位置是/etc/systemd/system/default.target，通常符号链接到graphical.target（图形界面）或者multi-user.target（多用户命令行）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（2）启动脚本的位置，以前是/etc/init.d目录，符号链接到不同的 RunLevel 目录 （比如/etc/rc3.d、/etc/rc5.d等），现在则存放在/lib/systemd/system和/etc/systemd/system目录。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（3）配置文件的位置，以前init进程的配置文件是/etc/inittab，各种服务的配置文件存放在/etc/sysconfig目录。现在的配置文件主要存放在/lib/systemd目录，在/etc/systemd目录里面的修改可以覆盖原始设置。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;日志管理&quot;&gt;&lt;a href=&quot;#日志管理&quot; class=&quot;headerlink&quot; title=&quot;日志管理&quot;&gt;&lt;/a&gt;日志管理&lt;/h1&gt;&lt;p&gt;Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用journalctl一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是/etc/systemd/journald.conf。&lt;br&gt;journalctl功能强大，用法非常多。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 查看所有日志（默认情况下 ，只保存本次启动的日志）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看内核日志（不显示应用日志）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl -k&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看系统本次启动的日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl -b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl -b -0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看上一次启动的日志（需更改设置）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl -b -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看指定时间的日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl --since=&amp;quot;2012-10-30 18:17:16&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl --since &amp;quot;20 min ago&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl --since yesterday&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl --since &amp;quot;2015-01-10&amp;quot; --until &amp;quot;2015-01-11 03:00&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl --since 09:00 --until &amp;quot;1 hour ago&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 显示尾部的最新10行日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 显示尾部指定行数的日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl -n 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 实时滚动显示最新日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl -f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看指定服务的日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl /usr/lib/systemd/systemd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看指定进程的日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl _PID=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看某个路径的脚本的日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl /usr/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看指定用户的日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl _UID=33 --since today&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看某个 Unit 的日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl -u nginx.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl -u nginx.service --since today&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 实时滚动显示某个 Unit 的最新日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl -u nginx.service -f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 合并显示多个 Unit 的日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ journalctl -u nginx.service -u php-fpm.service --since today&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看指定优先级（及其以上级别）的日志，共有8级&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 0: emerg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 1: alert&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 2: crit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 3: err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 4: warning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 5: notice&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 6: info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 7: debug&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl -p err -b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 日志默认分页输出，--no-pager 改为正常的标准输出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl --no-pager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 以 JSON 格式（单行）输出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl -b -u nginx.service -o json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 以 JSON 格式（多行）输出，可读性更好&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl -b -u nginx.serviceqq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -o json-pretty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 显示日志占据的硬盘空间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl --disk-usage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 指定日志文件占据的最大空间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl --vacuum-size=1G&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 指定日志文件保存多久&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo journalctl --vacuum-time=1years&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Systemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://adu.404nf.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://adu.404nf.cn/tags/Linux/"/>
    
      <category term="Systemd" scheme="http://adu.404nf.cn/tags/Systemd/"/>
    
  </entry>
  
  <entry>
    <title>程序员入门之git</title>
    <link href="http://adu.404nf.cn/2016/05/29/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%85%A5%E9%97%A8%E4%B9%8Bgit/"/>
    <id>http://adu.404nf.cn/2016/05/29/程序员入门之git/</id>
    <published>2016-05-29T02:49:08.000Z</published>
    <updated>2016-06-05T08:22:12.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;代码版本管理工具&quot;&gt;&lt;a href=&quot;#代码版本管理工具&quot; class=&quot;headerlink&quot; title=&quot;代码版本管理工具&quot;&gt;&lt;/a&gt;代码版本管理工具&lt;/h1&gt;&lt;p&gt;在生产环境下的开发过程中，一个工程的代码通常是有多个程序员协同完成，这就涉及到代码在不通终端的同步问题，基于此需求，我们产生了代码版本工具，目前比较主流的两种为git和SVN&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;git-与-SVN&quot;&gt;&lt;a href=&quot;#git-与-SVN&quot; class=&quot;headerlink&quot; title=&quot;git 与 SVN&quot;&gt;&lt;/a&gt;git 与 SVN&lt;/h2&gt;&lt;p&gt;关于git和SVN的区别，网上有很多，根据笔者使用的经验，感觉git还是要比SVN现金一些，首先git是一个分布式版本管理系统，SVN更像是一个储存代码的仓库，管理员可以给不同的代码提交者提供不同的权限，仅此而已。git于SVN相比明显的优势在于不依赖网络，对分支管理有更好的支持，命令行简介好用（SVN也有命令行工具，但很多公司还是采用图形化界面）&lt;/p&gt;
&lt;h2 id=&quot;git介绍&quot;&gt;&lt;a href=&quot;#git介绍&quot; class=&quot;headerlink&quot; title=&quot;git介绍&quot;&gt;&lt;/a&gt;git介绍&lt;/h2&gt;&lt;p&gt;git是Linux的创始人Linus于2005年花了大概两周时间用C语言编写的分布式版本控制系统。&lt;/p&gt;
&lt;h2 id=&quot;git使用&quot;&gt;&lt;a href=&quot;#git使用&quot; class=&quot;headerlink&quot; title=&quot;git使用&quot;&gt;&lt;/a&gt;git使用&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;在控制台输入git 如果弹出提示信息，则跳过此步骤&lt;/p&gt;
&lt;h4 id=&quot;mac&quot;&gt;&lt;a href=&quot;#mac&quot; class=&quot;headerlink&quot; title=&quot;mac&quot;&gt;&lt;/a&gt;mac&lt;/h4&gt;&lt;p&gt;可以使用homebrew安装&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;homebrew作为程序员mac的标配，如果你还没有安装，请键入：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以安装xcode，自带git&lt;/p&gt;
&lt;h4 id=&quot;windows&quot;&gt;&lt;a href=&quot;#windows&quot; class=&quot;headerlink&quot; title=&quot;windows&quot;&gt;&lt;/a&gt;windows&lt;/h4&gt;&lt;p&gt;到官网下载安装:&lt;br&gt;&lt;a href=&quot;http://msysgit.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://msysgit.github.com/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install git-core&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-get install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt;在命令行输入：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &amp;quot;Your Name&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &amp;quot;email@example.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;改配置用于识别代码提交者身份&lt;/p&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;h4 id=&quot;代码提交&quot;&gt;&lt;a href=&quot;#代码提交&quot; class=&quot;headerlink&quot; title=&quot;代码提交&quot;&gt;&lt;/a&gt;代码提交&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init   #创建代码版本库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add .  #将当前目录下所有文件加入版本库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;quot;message&amp;quot;  #提交代码&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git status #查看工作区状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git diff #查看代码更改&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git log  #查看提交日志&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;版本回退&quot;&gt;&lt;a href=&quot;#版本回退&quot; class=&quot;headerlink&quot; title=&quot;版本回退&quot;&gt;&lt;/a&gt;版本回退&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reflog #查看所有日志，包含head信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard HEAD^ 会退到上一版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard &amp;lt;commit_id&amp;gt; 会退到指定版本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;撤销工作区修改：    &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout -- file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;远程仓库&quot;&gt;&lt;a href=&quot;#远程仓库&quot; class=&quot;headerlink&quot; title=&quot;远程仓库&quot;&gt;&lt;/a&gt;远程仓库&lt;/h4&gt;&lt;p&gt;这里以github为例&lt;br&gt;从远程仓库克隆代码:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/username/projectname.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果想讲本地已有的代码推送到远程，则需要跟远程费分支建立连接&lt;br&gt;与远程分支建立联系，需要remote origin&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin https://github.com/username/projectname.git #添加远程分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin master #推送本地origin分支到master分支&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果提示有冲突，则需要先pull 下来，修改之后再push&lt;/p&gt;
&lt;h4 id=&quot;分支管理&quot;&gt;&lt;a href=&quot;#分支管理&quot; class=&quot;headerlink&quot; title=&quot;分支管理&quot;&gt;&lt;/a&gt;分支管理&lt;/h4&gt;&lt;p&gt;git中，一个分支为一个工作环境，分支与分支之间可以执行创建和合并操作。&lt;br&gt;分支的一般使用：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git branch # 查看分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch &amp;lt;name&amp;gt;  # 创建分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout &amp;lt;name&amp;gt; # 切换分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b &amp;lt;name&amp;gt; # 创建并切换分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git merge &amp;lt;name&amp;gt; #合并某分支到当前分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -d &amp;lt;name&amp;gt; # 删除分支 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -D &amp;lt;name&amp;gt; # 强行删除分支&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当更改同时发生在两个分支上，这时候我们有需要对两个分支进行合并，那解决冲突是很容易发生的状况这时候我们需要使用git status 查看状态，执行合并之后在当前分支解决合并冲突问题，在合并就可以了&lt;br&gt;可以使用一下命令查看分支合并情况：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git log --graph&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;忽略别名&quot;&gt;&lt;a href=&quot;#忽略别名&quot; class=&quot;headerlink&quot; title=&quot;忽略别名&quot;&gt;&lt;/a&gt;忽略别名&lt;/h4&gt;&lt;p&gt;在git中可以通过编辑.gitignore 文件达到控制忽略文件类型的目的，当文件自动不被add 到仓库里。&lt;br&gt;忽略的语法规则：&lt;br&gt;(#)表示注释&lt;br&gt;(*)  表示任意多个字符;&lt;br&gt;(?) 代表一个字符;&lt;br&gt; ([abc]) 代表可选字符范围&lt;br&gt;如果名称最前面是路径分隔符 (/) ，表示忽略的该文件在此目录下。&lt;br&gt;如果名称的最后面是 (/) ，表示忽略整个目录，但同名文件不忽略。&lt;br&gt;通过在名称前面加 (!) ，代表不忽略。&lt;br&gt;例子如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 这行是注释&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*.a   # 忽略所有 .a 伟扩展名的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!lib.a   # 但是 lib.a 不忽略，即时之前设置了	忽略所有的 .a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/TODO   # 只忽略此目录下 TODO 文件，子目录的 TODO 不忽略 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;build/    # 忽略所有的 build/ 目录下文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;doc/*.txt    # 忽略如 doc/notes.txt, 但是不忽略如 doc/server/arch.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于不同编程语言，通常会有统一的忽略规则，大家可以在这里直接找到配置模板：&lt;br&gt;&lt;a href=&quot;https://github.com/github/gitignore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/github/gitignore&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;快捷命令配置&quot;&gt;&lt;a href=&quot;#快捷命令配置&quot; class=&quot;headerlink&quot; title=&quot;快捷命令配置&quot;&gt;&lt;/a&gt;快捷命令配置&lt;/h4&gt;&lt;p&gt;在git里可以使用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.&amp;lt;shortname&amp;gt; &amp;lt;command_name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;的方式制定快捷命令&lt;br&gt;以下为一些常用的快捷命令设置&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.st status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.co checkout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.ci commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.br branch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.unstage &amp;apos;reset HEAD&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.last &amp;apos;log -1&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.lg &amp;quot;log --color --graph --pretty=format:&amp;apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;apos; --abbrev-commit&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ok ,that’s all&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代码版本管理工具&quot;&gt;&lt;a href=&quot;#代码版本管理工具&quot; class=&quot;headerlink&quot; title=&quot;代码版本管理工具&quot;&gt;&lt;/a&gt;代码版本管理工具&lt;/h1&gt;&lt;p&gt;在生产环境下的开发过程中，一个工程的代码通常是有多个程序员协同完成，这就涉及到代码在不通终端的同步问题，基于此需求，我们产生了代码版本工具，目前比较主流的两种为git和SVN&lt;br&gt;
    
    </summary>
    
      <category term="worker" scheme="http://adu.404nf.cn/categories/worker/"/>
    
    
      <category term="工具" scheme="http://adu.404nf.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>ThoughtWorks第一周学习总结</title>
    <link href="http://adu.404nf.cn/2016/05/24/ThoughtWorks%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://adu.404nf.cn/2016/05/24/ThoughtWorks第一周学习总结/</id>
    <published>2016-05-24T13:44:57.000Z</published>
    <updated>2016-05-24T16:22:17.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;关于一周来学习情况总结&quot;&gt;&lt;a href=&quot;#关于一周来学习情况总结&quot; class=&quot;headerlink&quot; title=&quot;关于一周来学习情况总结&quot;&gt;&lt;/a&gt;关于一周来学习情况总结&lt;/h1&gt;&lt;p&gt;不知不觉进入TW已经一周了，深感自己离成为一个合格的TWer还有很长的距离。在学习的过程中离不开总结和分享，在TW最棒的就是可以随时和身边的技术牛人们分享自己的学习心得，时时总结，有助于梳理自己的知识体系，巩固自己的学习方法。正所谓“时时勤拂拭，莫使惹尘埃”。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面就几个关键词进行一个小结：&lt;/p&gt;
&lt;h2 id=&quot;我所除的环境&quot;&gt;&lt;a href=&quot;#我所除的环境&quot; class=&quot;headerlink&quot; title=&quot;我所除的环境&quot;&gt;&lt;/a&gt;我所除的环境&lt;/h2&gt;&lt;h3 id=&quot;ThouhgtWorks显而易见的工作习惯&quot;&gt;&lt;a href=&quot;#ThouhgtWorks显而易见的工作习惯&quot; class=&quot;headerlink&quot; title=&quot;ThouhgtWorks显而易见的工作习惯&quot;&gt;&lt;/a&gt;ThouhgtWorks显而易见的工作习惯&lt;/h3&gt;&lt;p&gt;  1.Email 轰炸&lt;br&gt;  2.Stand metting&lt;br&gt;      就像Align Development里面提到的一样，Stand up, Aline Comstomer 在TW被很好地执行，每日站会是必不可少的&lt;br&gt;  3.频繁的沟通&lt;br&gt;      之前的工作经验告诉我，你只需要写得一手好代码就可以在公司站稳脚跟，但是这点认知在TW被彻底推翻，与代码同样重要的是你的沟通能力，在实际开发过程中，沟通消耗的资源甚至会大于写代码的消耗。&lt;br&gt;  4.Pair-Programming&lt;br&gt;      这也是Align Deployment的重要一环，在TW几乎每一件事都是pair的，这中工作方式可以有效地解决掉“个人英雄”的问题，一段代码出了问题，至少有两个人可以来改这段代码。同时加强了程序员之间的交流，也有利于代码规范的实施。&lt;br&gt;  5.代码洁癖&lt;br&gt;      由于每一段代码都会有人review,这使很多TWer养成了代码洁癖，代码不但要实现功能，还要写得好看，这一点我个人认为也是极好的。&lt;br&gt;  6.频繁的workshop和session&lt;br&gt;  7.无处不在的敏捷&lt;br&gt;    在TW，敏捷已经超越一种开发方式而成为一种文化存在，步步为营，小步前进，似乎是每一个工程师低调而又自信的工作方式。这很好，值得学习：）&lt;/p&gt;
&lt;h2 id=&quot;我面临的问题&quot;&gt;&lt;a href=&quot;#我面临的问题&quot; class=&quot;headerlink&quot; title=&quot;我面临的问题&quot;&gt;&lt;/a&gt;我面临的问题&lt;/h2&gt;&lt;p&gt;工作方式上的问题是很容易适应的，TW有宽松的工作环境和乐于助人的同事。让我吃惊的是我接触到的每一个同事都是健谈而友好的，其中不乏很多大神，所以我一点都不担心自己成长。目前只需要找到自己的短板，针对性的进行一些加强性训练：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.英文能力
    从进公司到现在，已经从几乎听不懂同事们在说什么到可以看英文文档了，但是英文交流还存在严重的问题，主要表现在无法用英语表达自己所想的内容，另外英文阅读和听力速度还有些跟不上
2.DevOps专业能力
    目前我接触到的DevOps能力主要落实到几个工具的使用上：Jenkins,AWS,ansible,另外还需要掌握vagrant,git,shell,yaml，Linux命令（Vi编辑器命令）对工具来讲，整体不难，拿下英文文档，实际需要的只是操作，后面几个更倾向于需要具备的基本素质才是我目前最需要达到的目标。
3.习惯的建立
    习惯主要分为工作习惯，学习习惯，和生活习惯，这几点在过去的一周几乎是混乱的，这几个习惯应该有一定的准则，概括来说，工作习惯应该是高效可靠，随时可以再session和当前的work中切换自己的状态，那么设计到的内容主要是calendar的管理和mind.txt的优化，我还没有上手公司正式项目，所以目前工作效率优化仅仅停留在自己的事情备忘和计划这个层面。生活习惯，目前来讲主要是健身和游泳，羽毛球视club活动参加，生活应该规律，保证健康的身体和工作时间有一个清醒的大脑。学习习惯是所有习惯中最重要的，主要是根据学习时间，blog时间和阅读时间是每天不可少的内容，希望这些习惯可以再TW贯彻下去.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;我的应对&quot;&gt;&lt;a href=&quot;#我的应对&quot; class=&quot;headerlink&quot; title=&quot;我的应对&quot;&gt;&lt;/a&gt;我的应对&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1.关于英语问题，目前的解决方式是阅读MartinFlower的博客，以及每天用英语进行工作总结，尽可能熟悉英文语境以求更好表达自己想表达的东西。
2.DevOps专业能力
    workshop基本只适用于还没有建立起自己学习习惯的人和对一个东西建立初步认识，session也不能对技术提高起到决定性的帮助，频繁的沟通带来的缺点是时间的碎片化，我需要随时跟进自己的一个进程进展到什么程度，有效挂起和有效恢复，才能保证工作和学习同步有效地进行。
    具体来说专业能力的提高除了被动在工作中使用需要用到的技术，跟以前一样，还是要在工作之余对在工作中遇到的问题进行挖掘，弄清楚背后的原理，才能应对同样的问题以及问题的变种。
3.习惯的建立
    工作上和生活上不用花太大心思，生活上只要保证每天早晚各半个小时的锻炼整个人的精气神就会大不一样。周末游泳，这个不用我说自然会有的。    
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;我的决定&quot;&gt;&lt;a href=&quot;#我的决定&quot; class=&quot;headerlink&quot; title=&quot;我的决定&quot;&gt;&lt;/a&gt;我的决定&lt;/h2&gt;&lt;p&gt;基于以上现状以及分析，我的个人时间计划表初步安排如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;7：00 起床
~7：30洗漱，锻炼
~8：00阅读英语，内容为随机选取技术博客活着计划任务一篇
9：00~12：00工作
12：00~13：00阅读一小时
13：00~13：30可以适当午休
14：00~19:00工作，汇报一天的工作
20：00成功降落
晚上：整理白天产生的mind.txt，选取一个技术点blog
    英文能力训练二十分钟，阅读一小时，锻炼半小时
23:00睡觉    
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于一周来学习情况总结&quot;&gt;&lt;a href=&quot;#关于一周来学习情况总结&quot; class=&quot;headerlink&quot; title=&quot;关于一周来学习情况总结&quot;&gt;&lt;/a&gt;关于一周来学习情况总结&lt;/h1&gt;&lt;p&gt;不知不觉进入TW已经一周了，深感自己离成为一个合格的TWer还有很长的距离。在学习的过程中离不开总结和分享，在TW最棒的就是可以随时和身边的技术牛人们分享自己的学习心得，时时总结，有助于梳理自己的知识体系，巩固自己的学习方法。正所谓“时时勤拂拭，莫使惹尘埃”。&lt;br&gt;
    
    </summary>
    
      <category term="ThoughtWorker" scheme="http://adu.404nf.cn/categories/ThoughtWorker/"/>
    
    
      <category term="敏捷" scheme="http://adu.404nf.cn/tags/%E6%95%8F%E6%8D%B7/"/>
    
      <category term="ThoughtWorks" scheme="http://adu.404nf.cn/tags/ThoughtWorks/"/>
    
  </entry>
  
  <entry>
    <title>CI/CD</title>
    <link href="http://adu.404nf.cn/2016/05/19/CI-CD/"/>
    <id>http://adu.404nf.cn/2016/05/19/CI-CD/</id>
    <published>2016-05-19T12:04:35.000Z</published>
    <updated>2016-05-20T01:54:23.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Agile-Development&quot;&gt;&lt;a href=&quot;#Agile-Development&quot; class=&quot;headerlink&quot; title=&quot;Agile Development&quot;&gt;&lt;/a&gt;Agile Development&lt;/h1&gt;&lt;p&gt;before we talk about CI and CD， I think we should figure out why we need them, so we have to talk about Agile Development first.&lt;br&gt;Agile Development is a set of principles for software development. It was develop to response to changing customer’s requirement. As we all know, managers generally desirable to quantify the progress of the development, but quantify of the coding is not easy, the quantify we can only control is the process of the requirment. So we can process a requirement implemented as an iteration cycle of software development.&lt;br&gt;For this purpose, they created with CI and CD as the core of agile development.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Continuous-Integration-CI&quot;&gt;&lt;a href=&quot;#Continuous-Integration-CI&quot; class=&quot;headerlink&quot; title=&quot;Continuous Integration(CI)&quot;&gt;&lt;/a&gt;Continuous Integration(CI)&lt;/h2&gt;&lt;p&gt;Continuous Integration means you need to integration at least daily, It’s a development practice that requires developers to integrate code into a shared repository several times a day.”Shared”” means everyone can see what others working on, Frequently compile, test, commit means every times we commit, the code could be running, ideally, every integration should be automated, the unit-test allowing teams to detect problems early. By integration regularly, you can detect errors quickly, and locate them more easily.&lt;br&gt;there are many advantages for Continuous Integration, one of which is the continuous delivery.&lt;/p&gt;
&lt;h2 id=&quot;Continuous-Delivery-CD&quot;&gt;&lt;a href=&quot;#Continuous-Delivery-CD&quot; class=&quot;headerlink&quot; title=&quot;Continuous Delivery(CD)&quot;&gt;&lt;/a&gt;Continuous Delivery(CD)&lt;/h2&gt;&lt;p&gt;Continuous Delivery is customer requirement oriented, It’s like Continuous Integration but more than it, Continuous Delivery is the natural extension of Continuous Integration, Continuous Delivery makes releases boring, so we can deliver frequently and get fast feedback on what users care about.&lt;/p&gt;
&lt;h2 id=&quot;Continuous-Deployment&quot;&gt;&lt;a href=&quot;#Continuous-Deployment&quot; class=&quot;headerlink&quot; title=&quot;Continuous Deployment&quot;&gt;&lt;/a&gt;Continuous Deployment&lt;/h2&gt;&lt;p&gt;Continuous Deployment is more than Continuous Delivery, seams like this:&lt;br&gt; &lt;img src=&quot;https://d1089v03p3mzyq.cloudfront.net/assets/website/continuous-integration-essentials/continuous-delivery-vs-continuous-deployment-b371cf5be55b1c52635058af7b70188cd2b608bfb92ca5487a3e41694e9ccf6b.jpg&quot; alt=&quot;88cd2b608bfb92ca5487a3e41694e9ccf6b.jpg&quot;&gt;&lt;br&gt;It is the practice of keeping your codebase deployable at any point. Beyond making sure your application passes automated tests it has to have all the configuration necessary to push it into production. Many teams then do push changes that pass the automated tests into a test or production environment immediately to ensure a fast development loop.&lt;br&gt;A simplified continuous deployment flow can look like this:&lt;br&gt;&lt;img src=&quot;https://risingstack-blog.s3-eu-west-1.amazonaws.com/2014/Sep/Continuous-deployment---New-Page.png&quot; alt=&quot;New-Page.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Development-Operations-DevOps&quot;&gt;&lt;a href=&quot;#Development-Operations-DevOps&quot; class=&quot;headerlink&quot; title=&quot;Development Operations(DevOps)&quot;&gt;&lt;/a&gt;Development Operations(DevOps)&lt;/h2&gt;&lt;p&gt;Development Operations is bigger than Continuous Deployment, It aims at establishing a culture and environment where building testing, and releasing software, can happen rapidly, and more reliably.&lt;br&gt;In my words, DevOps is a practical form of agile.&lt;/p&gt;
&lt;h2 id=&quot;Tools-for-CI-and-CD&quot;&gt;&lt;a href=&quot;#Tools-for-CI-and-CD&quot; class=&quot;headerlink&quot; title=&quot;Tools for CI and CD&quot;&gt;&lt;/a&gt;Tools for CI and CD&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.go.cd/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GoCD&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/teamcity/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TeamCity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Travis CI&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Agile-Development&quot;&gt;&lt;a href=&quot;#Agile-Development&quot; class=&quot;headerlink&quot; title=&quot;Agile Development&quot;&gt;&lt;/a&gt;Agile Development&lt;/h1&gt;&lt;p&gt;before we talk about CI and CD， I think we should figure out why we need them, so we have to talk about Agile Development first.&lt;br&gt;Agile Development is a set of principles for software development. It was develop to response to changing customer’s requirement. As we all know, managers generally desirable to quantify the progress of the development, but quantify of the coding is not easy, the quantify we can only control is the process of the requirment. So we can process a requirement implemented as an iteration cycle of software development.&lt;br&gt;For this purpose, they created with CI and CD as the core of agile development.&lt;br&gt;
    
    </summary>
    
      <category term="ThoughtWorker" scheme="http://adu.404nf.cn/categories/ThoughtWorker/"/>
    
    
      <category term="敏捷开发" scheme="http://adu.404nf.cn/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>thoughtworks面试</title>
    <link href="http://adu.404nf.cn/2016/04/20/thoughtworks%E9%9D%A2%E8%AF%95/"/>
    <id>http://adu.404nf.cn/2016/04/20/thoughtworks面试/</id>
    <published>2016-04-20T13:38:11.000Z</published>
    <updated>2016-04-20T14:25:33.000Z</updated>
    
    <content type="html">&lt;p&gt;今天是2016年4月20日&lt;/p&gt;
&lt;p&gt;地点在成都武侯区的一间电梯公寓&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;两个小时前，我的心情还无比地紧张。&lt;/p&gt;
&lt;p&gt;明天我将要面试一家最喜欢的公司。&lt;/p&gt;
&lt;p&gt;从电影院走出来，心情居然无比的放松，此刻我的能力已经不可能有太多提升，面试终于成为一场面试。&lt;/p&gt;
&lt;p&gt;好久没有像这一个月一样努力过，虽然回到成都后我一直觉得自己很努力，很努力地去生活，很努力的去忘掉不愉快的北京之行。&lt;/p&gt;
&lt;p&gt;我是为了梦想去北京的。&lt;/p&gt;
&lt;p&gt;有人告诉我，年轻就要去做想做的事，做了才不会后悔。我选择了电影。&lt;/p&gt;
&lt;p&gt;为了梦想，我住过北京三环600块一个月的地下室，和蹲点北影的群演们住在一起，我也当过群演，吃过五毛钱一顿的盒饭，拍过四十块钱一天的网络剧。那时候的我不觉得孤单，我觉得自己在梦想的起点，这些苦逼的经历都会成为未来牛逼的资本。&lt;/p&gt;
&lt;p&gt;可是未来和我呵呵了。&lt;/p&gt;
&lt;p&gt;转眼我得到了一个在剧组工作的机会，工作辛苦是我从来没做过的粗活累活儿，一个月五百块钱，我开心的像个第一次领到工钱的农民工。&lt;/p&gt;
&lt;p&gt;记得有一晚拍夜喜，从来扛不动的高台我终于抗动了，我觉得我胜任了这份工作，摄影掌机在游泳池那头喊：夜宵呢？！！这头有河南的灯光在窃窃私语，不知道为什么，吹着厦门的海风我竟然有些开心。&lt;/p&gt;
&lt;p&gt;转眼到了内蒙古，我见到了成龙大哥，说实话之前对他并没有特别喜欢，只是知道他是个了不起的文化符号，不过近距离接触确实觉得大哥是个很了不起的人，他没有教会我什么。呵呵，让你们失望了。&lt;/p&gt;
&lt;p&gt;北京回来之后，我的同学们都相继开始出去实习，偌大的校园里我每天泡图书馆，欧洲史，电影史，艺术理论。我觉得自己很充实，我觉得生活充满希望，因为北京有一份甚至很多份很好的工作等着我毕业后去做。&lt;/p&gt;
&lt;p&gt;转眼到了毕业。&lt;/p&gt;
&lt;p&gt;来到北京，我开始找工作。&lt;/p&gt;
&lt;p&gt;从两千五一个月的剪辑，我只干了三天，不知道为什么，和老总翻脸了。我至今都觉得这可能是宿命，如果不是那样，我可能现在还在北京，也许还在做剪辑。&lt;/p&gt;
&lt;p&gt;辗转之中我意识到要向做电影，必须得先学习，要学习又要做电影，唯一的路就是进入北京电影学院，在这个过程中我闭门造车，在北京度过了我最艰难的三个月。&lt;/p&gt;
&lt;p&gt;三个月里几乎没有和人说过话。&lt;/p&gt;
&lt;p&gt;那种孤独是我这辈子都会记得的。&lt;/p&gt;
&lt;p&gt;北京的雪，多美啊。一觉醒来，竟然看到了北京的初雪，那是那段日子里唯一美好的记忆。&lt;/p&gt;
&lt;p&gt;几乎没有悬念的，我回到了成都。&lt;/p&gt;
&lt;p&gt;我以为我的梦想死了。我以为我对事业不会再抱有激情了，就在这个时候，我和我的女朋友分手了。&lt;/p&gt;
&lt;p&gt;生活还得继续，我继续在一家科技公司做着不知道为什么要做的工作。&lt;/p&gt;
&lt;p&gt;在公司我觉得我是个挣钱的机器，回到家我觉得我活着就是为了活着，没有什么激情，也没有什么朋友。&lt;/p&gt;
&lt;p&gt;中间收到几个朋友的消息，得知我们很看好的一对对都分了。&lt;/p&gt;
&lt;p&gt;毕业是一个改造我们世界观的转折点。&lt;/p&gt;
&lt;p&gt;就这样过了一阵，我以为我已经死了。&lt;/p&gt;
&lt;p&gt;我以为再也不会有一份工作让我不要工资都愿意干了，&lt;/p&gt;
&lt;p&gt;我以为再也不会有一份事业是和钱无关的，&lt;/p&gt;
&lt;p&gt;我以为再也没有把碗擦肩的兄弟，一起闯荡江湖的热情了。&lt;/p&gt;
&lt;p&gt;就在这个时候，我遇到了thoughtworks。&lt;/p&gt;
&lt;p&gt;thoughtworks让我重新找回了自我。&lt;/p&gt;
&lt;p&gt;很久没有那种早上恨不得起的更早，晚上伸伸懒腰觉得又是充实的一天的日子了。&lt;/p&gt;
&lt;p&gt;从接到面试邀请，到正式进入公司面试，差不多一个月时间，我每天都在充满希望的读过，&lt;/p&gt;
&lt;p&gt;如饥似渴地学习，填满我空空如也大脑，几乎是种病态的对知识的渴望，我的身体和大脑都处于极度饥渴的状态，&lt;/p&gt;
&lt;p&gt;不断地学习计算机底层的东西，了解自己用过的东西的原理。&lt;/p&gt;
&lt;p&gt;重新翻出大学的课本，温习错过的知识。&lt;/p&gt;
&lt;p&gt;想起当年老师在台上讲的都是被我判定为无用的知识，我认定了自己以后不会做这行，我以为我会是个优秀的导演，可就像刚进剧组愿意做好一个场务，那为什么做为一个大学生，你不先学好你的本专业？&lt;/p&gt;
&lt;p&gt;我意识到这点了，还好我还年轻，我把以前的知识都翻出来看了一遍，还好不是很陌生。&lt;/p&gt;
&lt;p&gt;我又从网上找了很多资料一一阅读，我感受到了学习的快乐，有一种上天入地的感觉。&lt;/p&gt;
&lt;p&gt;现实的世界太狭窄，在知识的海洋里我们都拥有无限的可能。&lt;/p&gt;
&lt;p&gt;我感觉内心深处，自己慢慢醒来。&lt;/p&gt;
&lt;p&gt;重新开始学习，重新开始看书，重新抱起了我的吉他。&lt;/p&gt;
&lt;p&gt;生活开始有了希望，我的脸上浮现出了微笑。&lt;/p&gt;
&lt;p&gt;为了面试，我跟公司领导们撒了谎，对不起，因为我意识到我此刻有一件重要的事请要去做，他可能改变我事业的起点，&lt;/p&gt;
&lt;p&gt;然而当我做出这个决定，我已经被悄悄改变了。&lt;/p&gt;
&lt;p&gt;不管结果怎样，谢谢thoughtworks，谢谢你唤醒了我对生活的激情，有种缘分叫命中注定。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天是2016年4月20日&lt;/p&gt;
&lt;p&gt;地点在成都武侯区的一间电梯公寓&lt;br&gt;
    
    </summary>
    
    
      <category term="thoughtworks" scheme="http://adu.404nf.cn/tags/thoughtworks/"/>
    
  </entry>
  
  <entry>
    <title>RDBMS和NOSQL的技术差别</title>
    <link href="http://adu.404nf.cn/2016/04/20/RDBMS%E5%92%8CNOSQL%E7%9A%84%E6%8A%80%E6%9C%AF%E5%B7%AE%E5%88%AB/"/>
    <id>http://adu.404nf.cn/2016/04/20/RDBMS和NOSQL的技术差别/</id>
    <published>2016-04-20T02:01:24.000Z</published>
    <updated>2016-04-20T02:04:04.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;RDBMS和NOSQL的技术差别&quot;&gt;&lt;a href=&quot;#RDBMS和NOSQL的技术差别&quot; class=&quot;headerlink&quot; title=&quot;RDBMS和NOSQL的技术差别&quot;&gt;&lt;/a&gt;RDBMS和NOSQL的技术差别&lt;/h1&gt;&lt;p&gt;创新的背后往往会刺激痛苦。这一点在PDD(我们亲切地称为痛处驱动开发)软件开发领域尤为真实。从上世纪80年代以来，我们就都知道如何处理关系型数据——只要把数据放到关系型数据库管理系统(RDBMS)中，就可以使用SQL语句操作数据。然而，在过去几年来，我们的行业采纳NoSQL数据库的趋势在增长，数据不见得都在关系型数据库中存储了。&lt;/p&gt;
&lt;p&gt;诚然，在互联网上有成千上万关于选择SQL还是NoSQL的辩论。但是，这两者是不是必须站在对立面战斗呢？如果你选择一种或另一种，你知道为什么做选择，知道各自有何潜在益处吗？本文简要地讨论了SQL和NoSQL两种方法最常见的优点和缺点，包括简单的比较和开发者考虑的因素。像别的一些话题一样，这个问题没有对错，永远正确的经典答案依然是：具体问题具体分析。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;数据表VS-数据集&quot;&gt;&lt;a href=&quot;#数据表VS-数据集&quot; class=&quot;headerlink&quot; title=&quot;数据表VS.数据集&quot;&gt;&lt;/a&gt;数据表VS.数据集&lt;/h2&gt;&lt;p&gt;关系型和非关系型数据库的主要差异是数据存储的方式。关系型数据天然就是表格式的，因此存储在数据表的行和列中。数据表可以彼此关联协作存储，也很容易提取数据。与其相反，非关系型数据不适合存储在数据表的行和列中，而是大块组合在一起。非关系型数据通常存储在数据集中，就像文档、键值对或者图结构。你的数据及其特性是选择数据存储和提取方式的首要影响因素。&lt;/p&gt;
&lt;h2 id=&quot;预定义结构VS-动态结构&quot;&gt;&lt;a href=&quot;#预定义结构VS-动态结构&quot; class=&quot;headerlink&quot; title=&quot;预定义结构VS.动态结构&quot;&gt;&lt;/a&gt;预定义结构VS.动态结构&lt;/h2&gt;&lt;p&gt;关系型数据通常对应于结构化数据，因为数据表都有预定义好的结构(列的定义)，结构描述了数据的形式和内容。这一点对数据建模至关重要，你必须“第一时间先把结构定义好”。虽然预定义结构带来了可靠性和稳定性，但是已经存入数据的表结构要修改就非常痛苦了。另一方面，非关系型数据基于动态结构，通常适用于非结构化数据。非关系型数据可以很容易适应数据类型和结构的变化，因为动态结构本身就支持这一点。&lt;/p&gt;
&lt;h2 id=&quot;存储规范化VS存储代价&quot;&gt;&lt;a href=&quot;#存储规范化VS存储代价&quot; class=&quot;headerlink&quot; title=&quot;存储规范化VS存储代价&quot;&gt;&lt;/a&gt;存储规范化VS存储代价&lt;/h2&gt;&lt;p&gt;关系型数据库的数据存储是为了更高的规范性，把数据分隔成最小的逻辑表(关系表)以避免重复，获得最精简的空间利用。虽然数据规范性会使数据管理更清晰，但它通常也会带来一点点复杂性，尤其是单个操作可能涉及多个关系表的时候，数据管理就有点麻烦。另外，更精简的空间利用通常可以节约宝贵的数据存储，但是在当今世界我们基本可以认为存储的代价(磁盘空间)是微不足道的。而非关系型数据存储在平面数据集中，数据经常可能存在重复。单个数据库很少被分隔开，而是存储成一个整体，这样是为了整块数据更容易读写。&lt;/p&gt;
&lt;h2 id=&quot;纵向扩容VS横向扩容&quot;&gt;&lt;a href=&quot;#纵向扩容VS横向扩容&quot; class=&quot;headerlink&quot; title=&quot;纵向扩容VS横向扩容&quot;&gt;&lt;/a&gt;纵向扩容VS横向扩容&lt;/h2&gt;&lt;p&gt;SQL和NoSQL数据库最大的差别可能是在扩展方式上，要支持日益增长的需求当然要扩展。要支持更多并发量，SQL数据库是纵向扩展，也就是说提高处理能力，使用速度更快速的计算机，这样处理相同的数据集就更快了。因为数据存储在关系表中，操作的性能瓶颈可能涉及很多个表，这都需要通过提高计算机性能来客服。虽然SQL数据库有很大扩展空间，但最终肯定会达到纵向扩展的上限。而NoSQL数据库是横向扩展的。非关系型数据存储天然就是分布式的，NoSQL数据库的扩展可以通过给资源池添加更多普通的数据库服务器(节点)来分担负载。&lt;/p&gt;
&lt;h2 id=&quot;结构化查询VS非结构化查询&quot;&gt;&lt;a href=&quot;#结构化查询VS非结构化查询&quot; class=&quot;headerlink&quot; title=&quot;结构化查询VS非结构化查询&quot;&gt;&lt;/a&gt;结构化查询VS非结构化查询&lt;/h2&gt;&lt;p&gt;关系型数据库通过所谓结构化查询语言(也就是我们常说的SQL)来操作数据。SQL支持数据库CRUD(增加，查询，更新，删除)操作的功能非常强大，是业界标准用法。非关系型数据库以块(像文档一样)为单元操纵数据，使用所谓的非结构化查询语言(UnQL)，它是没有标准的，因数据库提供商的不同而不同。关系型表中主键的概念对应非关系存储中的文档Id。SQL数据库使用预定义优化方式(比如列索引定义)帮助加速查询操作，而NoSQL数据库采用更简单而精确的数据访问模式。&lt;/p&gt;
&lt;h2 id=&quot;映射VS本地化&quot;&gt;&lt;a href=&quot;#映射VS本地化&quot; class=&quot;headerlink&quot; title=&quot;映射VS本地化&quot;&gt;&lt;/a&gt;映射VS本地化&lt;/h2&gt;&lt;p&gt;SQL和NoSQL数据存储的选择还取决于开发人员，尽管这个因素影响不大。采用面向对象编程语言的开发人员通常会同时操作一个或多个数据实体(包括嵌套数据、列表和数组的复杂结构)，把数据传递给应用程序用户界面。要是讨论到底层数据库，事情就并不总是那么公平合理了。在关系型存储中，数据实体通常需要分成多个部分进行规范化，然后分开存储到多个关系型表中精简存储。幸运的是，这是一个长期存在的问题，大部分编程平台都有相应的简单解决方案，比如ORM层(对象关系映射)。ORM是位于关系型数据源和开发者使用的面向对象数据实体之间的一个映射层。然而，对于非关系型存储，不需要规范化数据，复杂数据实体可以整体存放在独立单元中。应用程序中使用的对象通常序列化为JSon串，存储在NoSQL数据库的JSon文档中。&lt;/p&gt;
&lt;h2 id=&quot;事务性VS纯扩展性&quot;&gt;&lt;a href=&quot;#事务性VS纯扩展性&quot; class=&quot;headerlink&quot; title=&quot;事务性VS纯扩展性&quot;&gt;&lt;/a&gt;事务性VS纯扩展性&lt;/h2&gt;&lt;p&gt;如果你的数据操作需要高事务性或者复杂数据查询需要控制执行计划，那么传统的SQL数据库从性能和稳定性方面考虑是你的最佳选择。SQL数据库支持对事务原子性细粒度控制，并且易于回滚事务。虽然NoSQL数据库也可以使用事务操作，但它们真正闪亮的价值是在操作的扩展性和大数据量处理方面。&lt;/p&gt;
&lt;h2 id=&quot;ACID-VS-CAP&quot;&gt;&lt;a href=&quot;#ACID-VS-CAP&quot; class=&quot;headerlink&quot; title=&quot;ACID VS CAP&quot;&gt;&lt;/a&gt;ACID VS CAP&lt;/h2&gt;&lt;p&gt;SQL 数据库久负盛名的价值就是通过所谓的ACID属性(原子性，一致性，隔离性，持久性)保证数据完整性，大部分关系型存储供应商都支持ACID。我们的目标是支持隔离不可分割的事务，其变化是持久的，数据也保持一致状态。而NoSQL数据库是让你在CAP(一致性，可用性，分区容忍度)中的任意两项中选择，因为在基于节点的分布式系统中，很难做到三项都满足。&lt;/p&gt;
&lt;h2 id=&quot;数据VS大数据&quot;&gt;&lt;a href=&quot;#数据VS大数据&quot; class=&quot;headerlink&quot; title=&quot;数据VS大数据&quot;&gt;&lt;/a&gt;数据VS大数据&lt;/h2&gt;&lt;p&gt;SQL数据库可以可靠地存储和处理数据，而NoSQL最大的优势是在应对大数据方面，也就是由我们社会或者计算机每天产生的大量非结构化的数据实体。NoSQL用无模式方式做数据管理，所以其横向扩展潜力是无限的，这可能是深度处理大数据捕获、管理、检索、分析和可视化的唯一有效途径。&lt;/p&gt;
&lt;h2 id=&quot;数据记录VS物联网和人联网&quot;&gt;&lt;a href=&quot;#数据记录VS物联网和人联网&quot; class=&quot;headerlink&quot; title=&quot;数据记录VS物联网和人联网&quot;&gt;&lt;/a&gt;数据记录VS物联网和人联网&lt;/h2&gt;&lt;p&gt;关系数据库在关注数据规范化和保证性能的基础上精简存储。但是近年来，我们产生数据的速度远大于关系型存储能满足存储的能力增长。刺激数据如此迅猛增长的原因是：巨大量的用户数和物联网。连接到互联网的用户在成倍增加，在同步使用我们的应用。由于大量移动设备数据传感设备接入互联网，机器产生的数据量也大幅增加。因此企业必须寻求NoSQL技术及基础架构来处理持续涌入的半结构化和非结构化数据。&lt;/p&gt;
&lt;h2 id=&quot;内部部署VS云计算&quot;&gt;&lt;a href=&quot;#内部部署VS云计算&quot; class=&quot;headerlink&quot; title=&quot;内部部署VS云计算&quot;&gt;&lt;/a&gt;内部部署VS云计算&lt;/h2&gt;&lt;p&gt;云计算现在已经无处不在了，它兼具SQL和NoSQL数据库的益处。云环境中的关系型存储通常是以服务形式提供的，是可复制、高可用性且分布式的，极大地提高了横向扩展能力。托管于云服务中的NoSQL数据库也天然享有自动分片的好处，可以阶段性地灵活弹性处理，集成高速缓存和巨大的计算能力来捕获、存储和分析大数据。&lt;/p&gt;
&lt;h2 id=&quot;付费VS开源&quot;&gt;&lt;a href=&quot;#付费VS开源&quot; class=&quot;headerlink&quot; title=&quot;付费VS开源&quot;&gt;&lt;/a&gt;付费VS开源&lt;/h2&gt;&lt;p&gt;有一种看法认为，SQL数据库大多数比较昂贵，而NoSQL数据库通常都是开源的。事实上，两种类型数据库都有开源的和商业的。常见的SQL 数据库有微软公司的SQL Server，MySQL，SQLite，Oracle和PostGres。流行的NoSQL数据库有Couchbase，MongoDB，Redis，BigTable和RavenDB。&lt;/p&gt;
&lt;h1 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h1&gt;&lt;p&gt;就像Neo之于Matrix，你可以选择。幸福的无知和幻想或者接受残酷的现实。但是，盲目选择使用SQL还是NoSQL技术，或者根据大众需求选择都是在幻想有魔法会自动选择合适的方案。SQL和NoSQL这两者都有各自的优缺点，选择正确的架构取决于你构建应用的需求。传统SQL数据库依然非常强大，可以可靠地处理你的事务性需求并保持完整性。只有在你接近关系数据库局限性边缘时，或者你的数据处理量浩如烟海时，操作扩展需要更加分布式的系统时，才考虑NoSQL方案。考虑这些因素之后再做选择，你就可以变成释放你的数据构建下一代应用令人叹为观止的神人。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.36dsj.com/archives/16986&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RDBMS和NOSQL的技术差别&quot;&gt;&lt;a href=&quot;#RDBMS和NOSQL的技术差别&quot; class=&quot;headerlink&quot; title=&quot;RDBMS和NOSQL的技术差别&quot;&gt;&lt;/a&gt;RDBMS和NOSQL的技术差别&lt;/h1&gt;&lt;p&gt;创新的背后往往会刺激痛苦。这一点在PDD(我们亲切地称为痛处驱动开发)软件开发领域尤为真实。从上世纪80年代以来，我们就都知道如何处理关系型数据——只要把数据放到关系型数据库管理系统(RDBMS)中，就可以使用SQL语句操作数据。然而，在过去几年来，我们的行业采纳NoSQL数据库的趋势在增长，数据不见得都在关系型数据库中存储了。&lt;/p&gt;
&lt;p&gt;诚然，在互联网上有成千上万关于选择SQL还是NoSQL的辩论。但是，这两者是不是必须站在对立面战斗呢？如果你选择一种或另一种，你知道为什么做选择，知道各自有何潜在益处吗？本文简要地讨论了SQL和NoSQL两种方法最常见的优点和缺点，包括简单的比较和开发者考虑的因素。像别的一些话题一样，这个问题没有对错，永远正确的经典答案依然是：具体问题具体分析。&lt;br&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://adu.404nf.cn/categories/SQL/"/>
    
    
      <category term="Nosql" scheme="http://adu.404nf.cn/tags/Nosql/"/>
    
      <category term="RDBMS" scheme="http://adu.404nf.cn/tags/RDBMS/"/>
    
  </entry>
  
  <entry>
    <title>敏捷开发</title>
    <link href="http://adu.404nf.cn/2016/04/19/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    <id>http://adu.404nf.cn/2016/04/19/敏捷开发/</id>
    <published>2016-04-19T06:41:46.000Z</published>
    <updated>2016-04-19T07:46:19.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;敏捷开发&quot;&gt;&lt;a href=&quot;#敏捷开发&quot; class=&quot;headerlink&quot; title=&quot;敏捷开发&quot;&gt;&lt;/a&gt;敏捷开发&lt;/h1&gt;&lt;p&gt;敏捷开发是一种以人为核心、迭代、循序渐进的开发方法。在敏捷开发中，软件项目的构建被切分成多个子项目，各个子项目的成果都经过测试，具备集成和可运行的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。&lt;br&gt; &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20140328151407843?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGl1Y2h1bm1pbmcwMzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;123.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Test-Driven-Development，测试驱动开发。&quot;&gt;&lt;a href=&quot;#Test-Driven-Development，测试驱动开发。&quot; class=&quot;headerlink&quot; title=&quot;Test-Driven Development，测试驱动开发。&quot;&gt;&lt;/a&gt;Test-Driven Development，测试驱动开发。&lt;/h2&gt;&lt;p&gt;　　它是敏捷开发的最重要的部分。在ThoughtWorks，我们实现任何一个功能都是从测试开始，首先对业务需求进行分析，分解为一个一个的Story，记录在Story Card上。然后两个人同时坐在电脑前面，一个人依照Story，从业务需求的角度来编写测试代码，另一个人看着他并且进行思考，如果有不同的意见就会提出来进行讨论，直到达成共识，这样写出来的测试代码就真实反映了业务功能需求。接着由另一个人控制键盘，编写该测试代码的实现。如果没有测试代码，就不能编写功能的实现代码。先写测试代码，能够让开发人员明确目标，就是让测试通过。&lt;/p&gt;
&lt;h2 id=&quot;Continuous-Integration，持续集成。&quot;&gt;&lt;a href=&quot;#Continuous-Integration，持续集成。&quot; class=&quot;headerlink&quot; title=&quot;Continuous Integration，持续集成。&quot;&gt;&lt;/a&gt;Continuous Integration，持续集成。&lt;/h2&gt;&lt;p&gt;　　在以往的软件开发过程中，集成是一件很痛苦的事情，通常很长时间才会做一次集成，这样的话，会引发很多问题，比如 build未通过或者单元测试失败。敏捷开发中提倡持续集成，一天之内集成十几次甚至几十次，如此频繁的集成能尽量减少冲突，由于集成很频繁，每一次集成的改变也很少，即使集成失败也容易定位错误。一次集成要做哪些事情呢？它至少包括：获得所有源代码、编译源代码、运行所有测试，包括单元测试、功能测试等；确认编译和测试是否通过，最后发送报告。当然也会做一些其它的任务，比如说代码分析、测试覆盖率分析等等。&lt;/p&gt;
&lt;h2 id=&quot;Refactoring，重构。&quot;&gt;&lt;a href=&quot;#Refactoring，重构。&quot; class=&quot;headerlink&quot; title=&quot;Refactoring，重构。&quot;&gt;&lt;/a&gt;Refactoring，重构。&lt;/h2&gt;&lt;p&gt;　　相信大家对它都很熟悉了，有很多很多的书用来介绍重构，最著名的是Martin的《重构》，Joshua的《从重构到模式》等。重构是在不改变系统外部行为下，对内部结构进行整理优化，使得代码尽量简单、优美、可扩展。在以往开发中，通常是在有需求过来，现在的系统架构不容易实现，从而对原有系统进行重构；或者在开发过程中有剩余时间了，对现在代码进行重构整理。但是在敏捷开发中，重构贯穿于整个开发流程，每一次开发者check in代码之前，都要对所写代码进行重构，让代码达到clean code that works。值得注意的是，在重构时，每一次改变要尽可能小，用单元测试来保证重构是否引起冲突，并且不只是对实现代码进行重构，如果测试代码中有重复，也要对它进行重构。&lt;/p&gt;
&lt;h2 id=&quot;Pair-Programming，结对编程。&quot;&gt;&lt;a href=&quot;#Pair-Programming，结对编程。&quot; class=&quot;headerlink&quot; title=&quot;Pair-Programming，结对编程。&quot;&gt;&lt;/a&gt;Pair-Programming，结对编程。&lt;/h2&gt;&lt;p&gt;　　在敏捷开发中，做任何事情都是Pair的，包括分析、写测试、写实现代码或者重构。Pair做事有很多好处，两个人在一起探讨很容易产生思想的火花，也不容易走上偏路。在我们公司，还有很多事都是Pair来做，比如Pair学习，Pair翻译，Pair做PPT，关于这个话题，钱钱同学有一篇很有名的文章对它进行介绍，名为Pair Programming (结对编程)。&lt;/p&gt;
&lt;h2 id=&quot;Stand-meeting，站立会议。&quot;&gt;&lt;a href=&quot;#Stand-meeting，站立会议。&quot; class=&quot;headerlink&quot; title=&quot;Stand meeting，站立会议。&quot;&gt;&lt;/a&gt;Stand meeting，站立会议。&lt;/h2&gt;&lt;p&gt;　　每天早上，项目组的所有成员都会站立进行一次会议，由于是站立的，所以时间不会很长，一般来说是15-20分钟。会议的内容并不是需求分析、任务分配等，而是每个人都回答三个问题：1. 你昨天做了什么？2. 你今天要做什么？ 3. 你遇到了哪些困难？站立会议让团队进行交流，彼此相互熟悉工作内容，如果有人曾经遇到过和你类似的问题，那么在站立会议后，他就会和你进行讨论。&lt;/p&gt;
&lt;h2 id=&quot;Frequent-Releases，小版本发布。&quot;&gt;&lt;a href=&quot;#Frequent-Releases，小版本发布。&quot; class=&quot;headerlink&quot; title=&quot;Frequent Releases，小版本发布。&quot;&gt;&lt;/a&gt;Frequent Releases，小版本发布。&lt;/h2&gt;&lt;p&gt;　　在敏捷开发中，不会出现这种情况，拿到需求以后就闭门造车，直到最后才将产品交付给客户，而是尽量多的产品发布，一般以周、月为单位。这样，客户每隔一段时间就会拿到发布的产品进行试用，而我们可以从客户那得到更多的反馈来改进产品。正因为发布频繁，每一个版本新增的功能简单，不需要复杂的设计，这样文档和设计就在很大程度上简化了。又因为简单设计，没有复杂的架构，所以客户有新的需求或者需求进行变动，也能很快的适应。&lt;/p&gt;
&lt;h2 id=&quot;Minimal-Documentation，较少的文档。&quot;&gt;&lt;a href=&quot;#Minimal-Documentation，较少的文档。&quot; class=&quot;headerlink&quot; title=&quot;Minimal Documentation，较少的文档。&quot;&gt;&lt;/a&gt;Minimal Documentation，较少的文档。&lt;/h2&gt;&lt;p&gt;　　其实敏捷开发中并不是没有文档，而是有大量的文档，即测试。这些测试代码真实的反应了客户的需求以及系统API 的用法，如果有新人加入团队，最快的熟悉项目的方法就是给他看测试代码，而比一边看着文档一边进行debug要高效。如果用书面文档或者注释，某天代码变化了，需要对这些文档进行更新。一旦忘记更新文档，就会出现代码和文档不匹配的情况，这更加会让人迷惑。而在敏捷中并不会出现，因为只有测试变化了，代码才会变化，测试是真实反应代码的。这时有人会问：代码不写注释行吗？一般来说好的代码不是需要大量的注释吗？其实简单可读的代码才是好的代码，既然简单可读了，别人一看就能够看懂，这时候根本不需要对代码进行任何注释。若你觉得这段代码不加注释的话别人可能看不懂，就表示设计还不够简单，需要对它进行重构。&lt;/p&gt;
&lt;h2 id=&quot;Collaborative-Focus，以合作为中心，表现为代码共享。&quot;&gt;&lt;a href=&quot;#Collaborative-Focus，以合作为中心，表现为代码共享。&quot; class=&quot;headerlink&quot; title=&quot;Collaborative Focus，以合作为中心，表现为代码共享。&quot;&gt;&lt;/a&gt;Collaborative Focus，以合作为中心，表现为代码共享。&lt;/h2&gt;&lt;p&gt;　　在敏捷开发中，代码是归团队所有而不是哪些模块的代码属于哪些人，每个人都有权利获得系统任何一部分的代码然后修改它，如果有人看到某些代码不爽的话，那他能够对这部分代码重构而不需要征求代码作者的同意，很可能也不知道是谁写的这部分代码。这样每个人都能熟悉系统的代码，即使团队的人员变动，也没有风险。&lt;/p&gt;
&lt;h2 id=&quot;Customer-Engagement-，现场客户。&quot;&gt;&lt;a href=&quot;#Customer-Engagement-，现场客户。&quot; class=&quot;headerlink&quot; title=&quot;Customer Engagement ，现场客户。&quot;&gt;&lt;/a&gt;Customer Engagement ，现场客户。&lt;/h2&gt;&lt;p&gt;　　敏捷开发中，客户是与开发团队一起工作的，团队到客户现场进行开发或者邀请客户到团队公司里来开发。如果开发过程中有什么问题或者产品经过一个迭代后，能够以最快速度得到客户的反馈。&lt;/p&gt;
&lt;h2 id=&quot;Automated-Testing-，自动化测试。&quot;&gt;&lt;a href=&quot;#Automated-Testing-，自动化测试。&quot; class=&quot;headerlink&quot; title=&quot;Automated Testing ，自动化测试。&quot;&gt;&lt;/a&gt;Automated Testing ，自动化测试。&lt;/h2&gt;&lt;p&gt;　　为了减小人力或者重复劳动，所有的测试包括单元测试、功能测试或集成测试等都是自动化的，这对QA人员提出了更高的要求。他们要熟悉开发语言、自动化测试工具，能够编写自动化测试脚本或者用工具录制。我们公司在自动化测试上做了大量的工作，包括Selenium开源项目。&lt;/p&gt;
&lt;h2 id=&quot;Adaptive-Planning，可调整计划。&quot;&gt;&lt;a href=&quot;#Adaptive-Planning，可调整计划。&quot; class=&quot;headerlink&quot; title=&quot;Adaptive Planning，可调整计划。&quot;&gt;&lt;/a&gt;Adaptive Planning，可调整计划。&lt;/h2&gt;&lt;p&gt;　　敏捷开发中计划是可调整的，并不是像以往的开发过程中，需求分析-&amp;gt;概要设计-&amp;gt;详细设计-&amp;gt;开发 -&amp;gt;测试-&amp;gt;交付，每一个阶段都是有计划的进行，一个阶段结束便开始下一个阶段。而敏捷开发中只有一次一次的迭代，小版本的发布，根据客户反馈随时作出相应的调整和变化。
　　&lt;/p&gt;
&lt;p&gt;   敏捷开发过程与传统的开发过程有很大不同，在这过程中，团队是有激情有活力的，能适应更大的变化，做出更高质量的软件。        &lt;/p&gt;
&lt;h2 id=&quot;敏捷宣言：四中核心价值观和十二条原则&quot;&gt;&lt;a href=&quot;#敏捷宣言：四中核心价值观和十二条原则&quot; class=&quot;headerlink&quot; title=&quot;敏捷宣言：四中核心价值观和十二条原则&quot;&gt;&lt;/a&gt;敏捷宣言：四中核心价值观和十二条原则&lt;/h2&gt;&lt;p&gt;我们一直在实践中探寻更好的软件开发方法，身体力行的同时也帮助他人。由此我们建立了如下价值观：&lt;br&gt;个体和互动 高于 流程和工具&lt;br&gt;工作的软件 高于 详尽的文档&lt;br&gt;客户合作 高于 合同谈判&lt;br&gt;响应变化 高于 遵循计划&lt;br&gt;也就是说，尽管右项有其价值，我们更重视左项的价值。&lt;br&gt;我们遵循以下原则：&lt;br&gt;我们最重要的目标，是通过持续不断地及早交付有价值的软件使客户满意。&lt;br&gt;欣然面对需求变化，即使在开发后期也一样。善于掌控变化，帮助客户获得竞争优势。&lt;br&gt;经常地交付可工作的软件，相隔几星期或一两个月，倾向于采取较短的周期。&lt;br&gt;业务人员和开发人员必须相互合作，项目中的每一天都不例外。&lt;br&gt;激发个体的斗志，以他们为核心搭建项目。提供他们所需的环境和支持，相信他们能够达成目标。&lt;br&gt;不论团队内外，传递信息效果最好效率也最高的方式是面对面的交谈。&lt;br&gt;可工作的软件是进度的首要度量标准。&lt;br&gt;敏捷过程倡导可持续开发。责任人、开发人员和用户要能够共同维持其步调稳定延续。&lt;br&gt;对技术精益求精，对设计不断完善，将提高敏捷能力。&lt;br&gt;以简洁为本，极力减少不必要工作量。&lt;br&gt;最好的架构、需求和设计出自于自组织的团队。&lt;br&gt;团队定期地反思如何能提高成效，并依此调整团队的行为。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/burningsheep/article/details/7725181&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/liuchunming033/article/details/22407569&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接2&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;敏捷开发&quot;&gt;&lt;a href=&quot;#敏捷开发&quot; class=&quot;headerlink&quot; title=&quot;敏捷开发&quot;&gt;&lt;/a&gt;敏捷开发&lt;/h1&gt;&lt;p&gt;敏捷开发是一种以人为核心、迭代、循序渐进的开发方法。在敏捷开发中，软件项目的构建被切分成多个子项目，各个子项目的成果都经过测试，具备集成和可运行的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。&lt;br&gt;
    
    </summary>
    
      <category term="TDD" scheme="http://adu.404nf.cn/categories/TDD/"/>
    
    
      <category term="敏捷开发" scheme="http://adu.404nf.cn/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
      <category term="thoughtworks面试" scheme="http://adu.404nf.cn/tags/thoughtworks%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>一次完整的HTTP事务是怎样一个过程？</title>
    <link href="http://adu.404nf.cn/2016/04/17/%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%95%B4%E7%9A%84HTTP%E4%BA%8B%E5%8A%A1%E6%98%AF%E6%80%8E%E6%A0%B7%E4%B8%80%E4%B8%AA%E8%BF%87%E7%A8%8B%EF%BC%9F/"/>
    <id>http://adu.404nf.cn/2016/04/17/一次完整的HTTP事务是怎样一个过程？/</id>
    <published>2016-04-17T03:35:37.000Z</published>
    <updated>2016-04-17T05:15:28.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;一次完整的HTTP事务是怎样一个过程&quot;&gt;&lt;a href=&quot;#一次完整的HTTP事务是怎样一个过程&quot; class=&quot;headerlink&quot; title=&quot;一次完整的HTTP事务是怎样一个过程&quot;&gt;&lt;/a&gt;一次完整的HTTP事务是怎样一个过程&lt;/h1&gt;&lt;p&gt;当我们在浏览器的地址栏输入 www.linux178.com ，然后回车，回车这一瞬间到看到页面到底发生了什么呢？&lt;/p&gt;
&lt;p&gt;以下过程仅是个人理解：&lt;/p&gt;
&lt;p&gt;域名解析 –&amp;gt; 发起TCP的3次握手 –&amp;gt; 建立TCP连接后发起http请求 –&amp;gt; 服务器响应http请求，浏览器得到html代码 –&amp;gt; 浏览器解析html代码，并请求html代码中的资源（如js、css、图片等） –&amp;gt; 浏览器对页面进行渲染呈现给用户&lt;/p&gt;
&lt;p&gt;关于HTTP协议可以参考以下：&lt;br&gt;HTTP协议漫谈  &lt;a href=&quot;http://kb.cnblogs.com/page/140611/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kb.cnblogs.com/page/140611/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP协议概览  &lt;a href=&quot;http://www.cnblogs.com/vamei/archive/2013/05/11/3069788.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/vamei/archive/2013/05/11/3069788.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;了解HTTP Headers的方方面面  &lt;a href=&quot;http://kb.cnblogs.com/page/55442/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kb.cnblogs.com/page/55442/&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下就是上面过程的一一分析，我们就以Chrome浏览器为例：&lt;/p&gt;
&lt;h2 id=&quot;域名解析&quot;&gt;&lt;a href=&quot;#域名解析&quot; class=&quot;headerlink&quot; title=&quot;域名解析&quot;&gt;&lt;/a&gt;域名解析&lt;/h2&gt;&lt;p&gt;首先Chrome浏览器会解析 www.linux178.com 这个域名（准确的叫法应该是主机名）对应的IP地址。怎么解析到对应的IP地址？&lt;/p&gt;
&lt;p&gt;① Chrome浏览器 会首先搜索浏览器自身的DNS缓存（缓存时间比较短，大概只有1分钟，且只能容纳1000条缓存），看自身的缓存中是否有www.linux178.com 对应的条目，而且没有过期，如果有且没有过期则解析到此结束。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;注：我们怎么查看Chrome自身的缓存？可以使用 chrome://net-internals/#dns 来进行查看
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;② 如果浏览器自身的缓存里面没有找到对应的条目，那么Chrome会搜索操作系统自身的DNS缓存,如果找到且没有过期则停止搜索解析到此结束.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;注：怎么查看操作系统自身的DNS缓存，以Windows系统为例，可以在命令行下使用 ipconfig /displaydns 来进行查看  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;③ 如果在Windows系统的DNS缓存也没有找到，那么尝试读取hosts文件（位于C:\Windows\System32\drivers\etc），看看这里面有没有该域名对应的IP地址，如果有则解析成功。&lt;/p&gt;
&lt;p&gt;④ 如果在hosts文件中也没有找到对应的条目，浏览器就会发起一个DNS的系统调用，就会向本地配置的首选DNS服务器（一般是电信运营商提供的，也可以使用像Google提供的DNS服务器）发起域名解析请求（通过的是UDP协议向DNS的53端口发起请求，这个请求是递归的请求，也就是运营商的DNS服务器必须得提供给我们该域名的IP地址），运营商的DNS服务器首先查找自身的缓存，找到对应的条目，且没有过期，则解析成功。如果没有找到对应的条目，则有运营商的DNS代我们的浏览器发起迭代DNS解析请求，它首先是会找根域的DNS的IP地址（这个DNS服务器都内置13台根域的DNS的IP地址），找打根域的DNS地址，就会向其发起请求（请问www.linux178.com这个域名的IP地址是多少啊？），根域发现这是一个顶级域com域的一个域名，于是就告诉运营商的DNS我不知道这个域名的IP地址，但是我知道com域的IP地址，你去找它去，于是运营商的DNS就得到了com域的IP地址，又向com域的IP地址发起了请求（请问www.linux178.com这个域名的IP地址是多少?）,com域这台服务器告诉运营商的DNS我不知道www.linux178.com这个域名的IP地址，但是我知道linux178.com这个域的DNS地址，你去找它去，于是运营商的DNS又向linux178.com这个域名的DNS地址（这个一般就是由域名注册商提供的，像万网，新网等）发起请求（请问www.linux178.com这个域名的IP地址是多少？），这个时候linux178.com域的DNS服务器一查，诶，果真在我这里，于是就把找到的结果发送给运营商的DNS服务器，这个时候运营商的DNS服务器就拿到了www.linux178.com这个域名对应的IP地址，并返回给Windows系统内核，内核又把结果返回给浏览器，终于浏览器拿到了www.linux178.com  对应的IP地址，该进行一步的动作了。&lt;/p&gt;
&lt;h4 id=&quot;注：一般情况下是不会进行以下步骤的&quot;&gt;&lt;a href=&quot;#注：一般情况下是不会进行以下步骤的&quot; class=&quot;headerlink&quot; title=&quot;注：一般情况下是不会进行以下步骤的&quot;&gt;&lt;/a&gt;注：一般情况下是不会进行以下步骤的&lt;/h4&gt;&lt;p&gt;如果经过以上的4个步骤，还没有解析成功，那么会进行如下步骤（以下是针对Windows操作系统）：&lt;/p&gt;
&lt;p&gt;⑤ 操作系统就会查找NetBIOS name Cache（NetBIOS名称缓存，就存在客户端电脑中的），那这个缓存有什么东西呢？凡是最近一段时间内和我成功通讯的计算机的计算机名和Ip地址，就都会存在这个缓存里面。什么情况下该步能解析成功呢？就是该名称正好是几分钟前和我成功通信过，那么这一步就可以成功解析。&lt;/p&gt;
&lt;p&gt;⑥ 如果第⑤步也没有成功，那会查询WINS 服务器（是NETBIOS名称和IP地址对应的服务器）&lt;/p&gt;
&lt;p&gt;⑦ 如果第⑥步也没有查询成功，那么客户端就要进行广播查找&lt;/p&gt;
&lt;p&gt;⑧ 如果第⑦步也没有成功，那么客户端就读取LMHOSTS文件（和HOSTS文件同一个目录下，写法也一样）&lt;/p&gt;
&lt;p&gt;如果第八步还没有解析成功，那么就宣告这次解析失败，那就无法跟目标计算机进行通信。只要这八步中有一步可以解析成功，那就可以成功和目标计算机进行通信。&lt;/p&gt;
&lt;p&gt;看下图抓包截图：&lt;br&gt;Linux虚拟机测试，使用命令 wget www.linux178.com 来请求，发现直接使用chrome浏览器请求时，干扰请求比较多，所以就使用wget命令来请求，不过使用wget命令只能把index.html请求回来，并不会对index.html中包含的静态资源（js、css等文件）进行请求。&lt;br&gt;&lt;img src=&quot;http://s3.51cto.com/wyfs02/M00/11/7C/wKioL1LSWzzxRParAAKbC85UJtE371.jpg&quot; alt=&quot;http://s3.51cto.com/wyfs02/M00/11/7C/wKioL1LSWzzxRParAAKbC85UJtE371.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;抓包分析：&lt;/p&gt;
&lt;p&gt;① 号包，这个是那台虚拟机在广播，要获取192.168.100.254（也就是网关）的MAC地址，因为局域网的通信靠的是MAC地址，它为什么需要跟网关进行通信是因为我们的DNS服务器IP是外围IP，要出去必须要依靠网关帮我们出去才行。&lt;br&gt;② 号包，这个是网关收到了虚拟机的广播之后，回应给虚拟机的回应，告诉虚拟机自己的MAC地址，于是客户端找到了路由出口。&lt;/p&gt;
&lt;p&gt;③ 号包，这个包是wget命令向系统配置的DNS服务器提出域名解析请求（准确的说应该是wget发起了一个DNS解析的系统调用），请求的域名www.linux178.com,期望得到的是IP6的地址（AAAA代表的是IPv6地址）&lt;br&gt;④ 号包，这个DNS服务器给系统的响应，很显然目前使用IPv6的还是极少数，所以得不到AAAA记录的&lt;br&gt;⑤ 号包，这个还是请求解析IPv6地址，但是www.linux178.com.leo.com这个主机名是不存在的，所以得到结果就是no such name&lt;/p&gt;
&lt;p&gt;⑥ 号包，这个才是请求的域名对应的IPv4地址（A记录）&lt;br&gt;⑦ 号包，DNS服务器不管是从缓存里面，还是进行迭代查询最终得到了域名的IP地址，响应给了系统，系统再给了wget命令，wget于是得到了www.linux178.com的IP地址，这里也可以看出客户端和本地的DNS服务器是递归的查询（也就是服务器必须给客户端一个结果）这就可以开始下一步了，进行TCP的三次握手。&lt;/p&gt;
&lt;h2 id=&quot;发起TCP的3次握手&quot;&gt;&lt;a href=&quot;#发起TCP的3次握手&quot; class=&quot;headerlink&quot; title=&quot;发起TCP的3次握手&quot;&gt;&lt;/a&gt;发起TCP的3次握手&lt;/h2&gt;&lt;p&gt;拿到域名对应的IP地址之后，User-Agent（一般是指浏览器）会以一个随机端口（1024 &amp;lt; 端口 &amp;lt; 65535）向服务器的WEB程序（常用的有httpd,nginx等）80端口发起TCP的连接请求。这个连接请求（原始的http请求经过TCP/IP4层模型的层层封包）到达服务器端后（这中间通过各种路由设备，局域网内除外），进入到网卡，然后是进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过Netfilter防火墙（属于内核的模块）的过滤，最终到达WEB程序（本文就以Nginx为例），最终建立了TCP/IP的连接。&lt;br&gt;如下图：&lt;br&gt;&lt;img src=&quot;http://s3.51cto.com/wyfs02/M01/11/7C/wKioL1LSW6rjI1nhAAE63Uv8ZRY731.jpg&quot; alt=&quot;wKioL1LSW6rjI1nhAAE63Uv8ZRY731.jpg&quot;&gt;&lt;br&gt;1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复&lt;br&gt;2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。&lt;br&gt;3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。&lt;br&gt;看抓包截图：&lt;br&gt;&lt;img src=&quot;http://s3.51cto.com/wyfs02/M00/11/7D/wKiom1LSW9-BWZw6AAD7FV3OfS4963.jpg&quot; alt=&quot;wKiom1LSW9-BWZw6AAD7FV3OfS4963.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;⑨ 号包 这个就是对应上面的步骤 1）&lt;br&gt;⑩ 号包 这个对应的上面的步骤 2）&lt;br&gt;号包 这个对应的上面的步骤 3）&lt;/p&gt;
&lt;p&gt;TCP 为什么需要3次握手？&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;p&gt;假设一个老外在故宫里面迷路了，看到了小明，于是就有下面的对话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;老外： Excuse me，Can you Speak English?
小明： yes 。
老外： OK,I want ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在问路之前，老外先问小明是否会说英语，小明回答是的，这时老外才开始问路&lt;/p&gt;
&lt;p&gt;2个计算机通信是靠协议（目前流行的TCP/IP协议）来实现,如果2个计算机使用的协议不一样，那是不能进行通信的，所以这个3次握手就相当于试探一下对方是否遵循TCP/IP协议，协商完成后就可以进行通信了，当然这样理解不是那么准确。&lt;/p&gt;
&lt;p&gt;为什么HTTP协议要基于TCP来实现？&lt;/p&gt;
&lt;p&gt;目前在Internet中所有的传输都是通过TCP/IP进行的，HTTP协议作为TCP/IP模型中应用层的协议也不例外，TCP是一个端到端的可靠的面向连接的协议，所以HTTP基于传输层TCP协议不用担心数据的传输的各种问题。&lt;/p&gt;
&lt;h2 id=&quot;建立TCP连接后发起http请求&quot;&gt;&lt;a href=&quot;#建立TCP连接后发起http请求&quot; class=&quot;headerlink&quot; title=&quot;建立TCP连接后发起http请求&quot;&gt;&lt;/a&gt;建立TCP连接后发起http请求&lt;/h2&gt;&lt;p&gt;进过TCP3次握手之后，浏览器发起了http的请求（看第包），使用的http的方法 GET 方法，请求的URL是 / ,协议是HTTP/1.0&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s3.51cto.com/wyfs02/M00/11/7C/wKioL1LSXDmgmVT_AAFUErYF2ys832.jpg&quot; alt=&quot;wKioL1LSXDmgmVT_AAFUErYF2ys832.jpg&quot;&gt;&lt;br&gt;下面是第12号包的详细内容：&lt;br&gt;&lt;img src=&quot;http://s3.51cto.com/wyfs02/M02/11/7D/wKiom1LSXHiCgHkBAAKtTT2l-Ac152.jpg&quot; alt=&quot;wKiom1LSXHiCgHkBAAKtTT2l-Ac152.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上的报文是HTTP请求报文。&lt;/p&gt;
&lt;p&gt;那么HTTP请求报文和响应报文会是什么格式呢？&lt;/p&gt;
&lt;p&gt;起始行：如 GET / HTTP/1.0 （请求的方法  请求的URL 请求所使用的协议）&lt;br&gt;头部信息：User-Agent  Host等成对出现的值&lt;br&gt;主体&lt;/p&gt;
&lt;p&gt;不管是请求报文还是响应报文都会遵循以上的格式。&lt;/p&gt;
&lt;p&gt;那么起始行中的请求方法有哪些种呢？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GET: 完整请求一个资源 （常用）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HEAD: 仅请求响应首部&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POST：提交表单  （常用）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PUT: (webdav) 上传文件（但是浏览器不支持该方法）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DELETE：(webdav) 删除&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OPTIONS：返回请求的资源所支持的方法的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TRACE: 追求一个资源请求中间所经过的代理（该方法不能由浏览器发出）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那什么是URL、URI、URN？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;URI  Uniform Resource Identifier 统一资源标识符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;URL  Uniform Resource Locator 统一资源定位符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    格式如下：  scheme://[username:password@]HOST:port/path/to/source&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                http://www.magedu.com/downloads/nginx-1.5.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;URN  Uniform Resource Name 统一资源名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;URL和URN 都属于 URI&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了方便就把URL和URI暂时都通指一个东西&lt;/p&gt;
&lt;h2 id=&quot;请求的协议有哪些种？&quot;&gt;&lt;a href=&quot;#请求的协议有哪些种？&quot; class=&quot;headerlink&quot; title=&quot;请求的协议有哪些种？&quot;&gt;&lt;/a&gt;请求的协议有哪些种？&lt;/h2&gt;&lt;p&gt;有以下几种：&lt;/p&gt;
&lt;p&gt;http/0.9: stateless&lt;br&gt;http/1.0: MIME, keep-alive (保持连接), 缓存&lt;br&gt;http/1.1: 更多的请求方法，更精细的缓存控制，持久连接(persistent connection) 比较常用&lt;/p&gt;
&lt;p&gt;下面是Chrome发起的http请求报文头部信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s3.51cto.com/wyfs02/M01/11/7C/wKioL1LSXMqCjyIQAAESKm-mkV8876.jpg&quot; alt=&quot;wKioL1LSXMqCjyIQAAESKm-mkV8876.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Accept  就是告诉服务器端，我接受那些MIME类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Accept-Encoding  这个看起来是接受那些压缩方式的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Accept-Lanague   告诉服务器能够发送哪些语言&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection       告诉服务器支持keep-alive特性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cookie           每次请求时都会携带上Cookie以方便服务器端识别是否是同一个客户端&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Host             用来标识请求服务器上的那个虚拟主机，比如Nginx里面可以定义很多&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;个虚拟主机&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                那这里就是用来标识要访问那个虚拟主机。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;User-Agent       用户代理，一般情况是浏览器，也有其他类型，如：wget curl 搜索引擎的蜘蛛等&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;条件请求首部：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;If-Modified-Since 是浏览器向服务器端询问某个资源文件如果自从什么时间修改过，那么重新发给我，这样就保证服务器端资源文件更新时，浏览器再次去请求，而不是使用缓存中的文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安全请求首部：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Authorization: 客户端提供给服务器的认证信息；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;什么是MIME？&quot;&gt;&lt;a href=&quot;#什么是MIME？&quot; class=&quot;headerlink&quot; title=&quot;什么是MIME？&quot;&gt;&lt;/a&gt;什么是MIME？&lt;/h2&gt;&lt;p&gt;MIME（Multipurpose Internet Mail Extesions 多用途互联网邮件扩展）是一个互联网标准，它扩展了电子邮件标准，使其能够支持非ASCII字符、二进制格式附件等多种格式的邮件消息，这个标准被定义在RFC 2045、RFC 2046、RFC 2047、RFC 2048、RFC 2049等RFC中。 由RFC 822转变而来的RFC 2822，规定电子邮件标准并不允许在邮件消息中使用7位ASCII字符集以外的字符。正因如此，一些非英语字符消息和二进制文件，图像，声音等非文字消息都不能在电子邮件中传输。MIME规定了用于表示各种各样的数据类型的符号化方法。 此外，在万维网中使用的HTTP协议中也使用了MIME的框架，标准被扩展为互联网媒体类型。&lt;/p&gt;
&lt;p&gt;MIME 遵循以下格式：major/minor 主类型/次类型 例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;image/jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;image/gif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text/html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;video/quicktime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appliation/x-httpd-php&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.服务器端响应http请求，浏览器得到html代码&lt;/p&gt;
&lt;p&gt;看下图 第12号包是http请求包，第32包是http响应包&lt;/p&gt;
&lt;p&gt;服务器端WEB程序接收到http请求以后，就开始处理该请求，处理之后就返回给浏览器html文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s3.51cto.com/wyfs02/M00/11/7D/wKiom1LSXVeQETJrAAaV9VlbbBo896.jpg&quot; alt=&quot;wKiom1LSXVeQETJrAAaV9VlbbBo896.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;第32号包 是服务器返回给客户端http响应包（200 ok 响应的MIME类型是text/html），代表这一次客户端发起的http请求已成功响应。200 代表是的 响应成功的状态码，还有其他的状态码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1xx: 信息性状态码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    100, 101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2xx: 成功状态码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    200：OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3xx: 重定向状态码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    301: 永久重定向, Location响应首部的值仍为当前URL，因此为隐藏重定向;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    302: 临时重定向，显式重定向, Location响应首部的值为新的URL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    304：Not Modified  未修改，比如本地缓存的资源文件和服务器上比较时，发现并没有修改，服务器返回一个304状态码，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        告诉浏览器，你不用请求该资源，直接使用本地的资源即可。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4xx: 客户端错误状态码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    404: Not Found  请求的URL资源并不存在&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5xx: 服务器端错误状态码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    500: Internal Server Error  服务器内部错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    502: Bad Gateway  前面代理服务器联系不到后端的服务器时出现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    504：Gateway Timeout  这个是代理能联系到后端的服务器，但是后端的服务器在规定的时间内没有给代理服务器响应&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用Chrome浏览器看到的响应头信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s3.51cto.com/wyfs02/M02/11/7C/wKioL1LSXgCDWDvyAADfe7wzmKk795.jpg&quot; alt=&quot;wKioL1LSXgCDWDvyAADfe7wzmKk795.jpg&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Connection            使用keep-alive特性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Encoding      使用gzip方式对资源压缩&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-type          MIME类型为html类型，字符集是 UTF-8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date                  响应的日期&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server                使用的WEB服务器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transfer-Encoding:chunked   分块传输编码 是http中的一种数据传输机制，允许HTTP由网页服务器发送给客户端应用（通常是网页浏览器）的数据可以分成多个部分，分块传输编码只在HTTP协议1.1版本（HTTP/1.1）中提供&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vary  这个可以参考（http://blog.csdn.net/tenfyguo/article/details/5939000）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X-Pingback  参考（http://blog.sina.com.cn/s/blog_bb80041c0101fmfz.html）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;那到底服务器端接收到http请求后是怎么样生成html文件？&quot;&gt;&lt;a href=&quot;#那到底服务器端接收到http请求后是怎么样生成html文件？&quot; class=&quot;headerlink&quot; title=&quot;那到底服务器端接收到http请求后是怎么样生成html文件？&quot;&gt;&lt;/a&gt;那到底服务器端接收到http请求后是怎么样生成html文件？&lt;/h2&gt;&lt;p&gt;假设服务器端使用nginx+php(fastcgi)架构提供服务&lt;/p&gt;
&lt;p&gt;① nginx读取配置文件&lt;/p&gt;
&lt;p&gt;我们在浏览器的地址栏里面输入的是 &lt;a href=&quot;http://www.linux178.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.linux178.com&lt;/a&gt; （&lt;a href=&quot;http://可以不用输入，浏览器会自动帮我们添加），其实完整的应该是http://www.linux178.com./&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://可以不用输入，浏览器会自动帮我们添加），其实完整的应该是http://www.linux178.com./&lt;/a&gt; 后面还有个点（这个点代表就是根域，一般情况下我们不用输入，也不显示）,后面的/也是不用添加，浏览器会自动帮我们添加（且看第3部那个图里面的URL），那么实际请求的URL是&lt;a href=&quot;http://www.linux178.com/，那么好了Nginx在收到&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.linux178.com/，那么好了Nginx在收到&lt;/a&gt; 浏览器 GET / 请求时，会读取http请求里面的头部信息，根据Host来匹配 自己的所有的虚拟主机的配置文件的server_name,看看有没有匹配的，有匹配那么就读取该虚拟主机的配置，发现如下配置：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root /web/echo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过这个就知道所有网页文件的就在这个目录下 这个目录就是/ 当我们&lt;a href=&quot;http://www.linux178.com/时就是访问这个目录下面的文件，例如访问http://www.linux178.com/index.html,那么代表/web/echo下面有个文件叫index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.linux178.com/时就是访问这个目录下面的文件，例如访问http://www.linux178.com/index.html,那么代表/web/echo下面有个文件叫index.html&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;index index.html index.htm index.php&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过这个就能得知网站的首页文件是那个文件，也就是我们在入&lt;a href=&quot;http://www.linux178.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.linux178.com/&lt;/a&gt; ，nginx就会自动帮我们把index.html（假设首页是index.php 当然是会尝试的去找到该文件，如果没有找到该文件就依次往下找，如果这3个文件都没有找到，那么就抛出一个404错误）加到后面，那么添加之后的URL是/index.php,然后根据后面的配置进行处理&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;location ~ .*\.php(\/.*)*$ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   root /web/echo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fastcgi_pass   127.0.0.1:9000;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fastcgi_index  index.php;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   astcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   include        fastcgi_params;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这一段配置指明凡是请求的URL中匹配（这里是启用了正则表达式进行匹配） *.php后缀的（后面跟的参数）都交给后端的fastcgi进程进行处理。&lt;/p&gt;
&lt;p&gt;② 把php文件交给fastcgi进程去处理&lt;/p&gt;
&lt;p&gt;于是nginx把/index.php这个URL交给了后端的fastcgi进程处理，等待fastcgi处理完成后（结合数据库查询出数据，填充模板生成html文件）返回给nginx一个index.html文档，Nginx再把这个index.html返回给浏览器，于是乎浏览器就拿到了首页的html代码，同时nginx写一条访问日志到日志文件中去。&lt;/p&gt;
&lt;h3 id=&quot;注1：nginx是怎么找index-php文件的？&quot;&gt;&lt;a href=&quot;#注1：nginx是怎么找index-php文件的？&quot; class=&quot;headerlink&quot; title=&quot;注1：nginx是怎么找index.php文件的？&quot;&gt;&lt;/a&gt;注1：nginx是怎么找index.php文件的？&lt;/h3&gt;&lt;p&gt;当nginx发现需要/web/echo/index.php文件时，就会向内核发起IO系统调用(因为要跟硬件打交道，这里的硬件是指硬盘，通常需要靠内核来操作，而内核提供的这些功能是通过系统调用来实现的)，告诉内核，我需要这个文件,内核从/开始找到web目录，再在web目录下找到echo目录，最后在echo目录下找到index.php文件，于是把这个index.php从硬盘上读取到内核自身的内存空间，然后再把这个文件复制到nginx进程所在的内存空间，于是乎nginx就得到了自己想要的文件了。&lt;/p&gt;
&lt;h3 id=&quot;注2：寻找文件在文件系统层面是怎么操作的？&quot;&gt;&lt;a href=&quot;#注2：寻找文件在文件系统层面是怎么操作的？&quot; class=&quot;headerlink&quot; title=&quot;注2：寻找文件在文件系统层面是怎么操作的？&quot;&gt;&lt;/a&gt;注2：寻找文件在文件系统层面是怎么操作的？&lt;/h3&gt;&lt;p&gt;比如nginx需要得到/web/echo/index.php这个文件&lt;/p&gt;
&lt;p&gt;每个分区（像ext3 ext3等文件系统，block块是文件存储的最小单元 默认是4096字节）都是包含元数据区和数据区，每一个文件在元数据区都有元数据条目（一般是128字节大小），每一个条目都有一个编号，我们称之为inode（index node 索引节点），这个inode里面包含 文件类型、权限、连接次数、属主和数组的ID、时间戳、这个文件占据了那些磁盘块也就是块的编号（block，每个文件可以占用多个block,并且block不一定是连续的，每个block是有编号的），如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s3.51cto.com/wyfs02/M01/11/7D/wKiom1LSXwWRzx75AACjRCdIYcI778.jpg&quot; alt=&quot;wKiom1LSXwWRzx75AACjRCdIYcI778.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;还有一个要点：目录其实也普通是文件，也需要占用磁盘块，目录不是一个容器。你看默认创建的目录就是4096字节，也就说只需要占用一个磁盘块，但这是不确定的。所以要找到目录也是需要到元数据区里面找到对应的条目，只有找到对应的inode就可找到目录所占用的磁盘块。&lt;/p&gt;
&lt;p&gt;那到底目录里面存放着什么，难道不是文件或者其他目录吗？&lt;/p&gt;
&lt;p&gt;其实目录存着这么一张表（姑且这么理解），里面放着 目录或者文件的名称和对应的inode号（暂时称之为映射表）,如下图：&lt;br&gt;&lt;img src=&quot;http://s3.51cto.com/wyfs02/M02/11/7D/wKiom1LSX3KATYWYAAAx2GkMEO4103.jpg&quot; alt=&quot;wKiom1LSX3KATYWYAAAx2GkMEO4103.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;假设&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/           在数据区占据 1、2号block ，/其实也是一个目录 里面有3个目录  web 111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;web         占据 5号block  是目录 里面有2个目录 echo data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo        占据 11号 block  是目录  里面有1个文件 index.php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index.php   占据 15 16号 block  是文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其在文件系统中分布如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s3.51cto.com/wyfs02/M01/11/7C/wKioL1LSX6OizObEAAHJJkuxCa0943.jpg&quot; alt=&quot;wKioL1LSX6OizObEAAHJJkuxCa0943.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么内核究竟是怎么找到index.php这个文件的呢？&lt;/p&gt;
&lt;p&gt;内核拿到nginx的IO系统调用要获取/web/echo/index.php这个文件请求之后&lt;/p&gt;
&lt;p&gt;① 内核读取元数据区 / 的inode，从inode里面读取/所对应的数据块的编号，然后在数据区找到其对应的块（1 2号块），读取1号块上的映射表找到web这个名称在元数据区对应的inode号&lt;/p&gt;
&lt;p&gt;② 内核读取web对应的inode（3号），从中得知web在数据区对应的块是5号块，于是到数据区找到5号块，从中读取映射表，知道echo对应的inode是5号，于是到元数据区找到5号inode&lt;/p&gt;
&lt;p&gt;③ 内核读取5号inode，得到echo在数据区对应的是11号块，于是到数据区读取11号块得到映射表，得到index.php对应的inode是9号&lt;/p&gt;
&lt;p&gt;④ 内核到元数据区读取9号inode，得到index.php对应的是15和16号数据块，于是就到数据区域找到15 16号块，读取其中的内容，得到index.php的完整内容&lt;/p&gt;
&lt;h2 id=&quot;浏览器解析html代码，并请求html代码中的资源&quot;&gt;&lt;a href=&quot;#浏览器解析html代码，并请求html代码中的资源&quot; class=&quot;headerlink&quot; title=&quot;浏览器解析html代码，并请求html代码中的资源&quot;&gt;&lt;/a&gt;浏览器解析html代码，并请求html代码中的资源&lt;/h2&gt;&lt;p&gt;浏览器拿到index.html文件后，就开始解析其中的html代码，遇到js/css/image等静态资源时，就向服务器端去请求下载（会使用多线程下载，每个浏览器的线程数不一样），这个时候就用上keep-alive特性了，建立一次HTTP连接，可以请求多个资源，下载资源的顺序就是按照代码里的顺序，但是由于每个资源大小不一样，而浏览器又多线程请求请求资源，所以从下图看出，这里显示的顺序并不一定是代码里面的顺序。&lt;/p&gt;
&lt;p&gt;浏览器在请求静态资源时（在未过期的情况下），向服务器端发起一个http请求（询问自从上一次修改时间到现在有没有对资源进行修改），如果服务器端返回304状态码（告诉浏览器服务器端没有修改），那么浏览器会直接读取本地的该资源的缓存文件。&lt;br&gt;&lt;img src=&quot;http://s3.51cto.com/wyfs02/M00/11/7D/wKiom1LSX_PT06f3AAF_5iS18UA331.jpg&quot; alt=&quot;wKiom1LSX_PT06f3AAF_5iS18UA331.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;详细的浏览器工作原理请看：&lt;a href=&quot;http://kb.cnblogs.com/page/129756/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kb.cnblogs.com/page/129756/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6.浏览器对页面进行渲染呈现给用户&lt;/p&gt;
&lt;p&gt;最后，浏览器利用自己内部的工作机制，把请求到的静态资源和html代码进行渲染，渲染之后呈现给用户。&lt;/p&gt;
&lt;p&gt;自此一次完整的HTTP事务宣告完成.&lt;/p&gt;
&lt;p&gt;本文出自 “雷纳科斯的博客” 博客，请务必保留此出处&lt;a href=&quot;http://linux5588.blog.51cto.com/65280/1351007&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://linux5588.blog.51cto.com/65280/1351007&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一次完整的HTTP事务是怎样一个过程&quot;&gt;&lt;a href=&quot;#一次完整的HTTP事务是怎样一个过程&quot; class=&quot;headerlink&quot; title=&quot;一次完整的HTTP事务是怎样一个过程&quot;&gt;&lt;/a&gt;一次完整的HTTP事务是怎样一个过程&lt;/h1&gt;&lt;p&gt;当我们在浏览器的地址栏输入 www.linux178.com ，然后回车，回车这一瞬间到看到页面到底发生了什么呢？&lt;/p&gt;
&lt;p&gt;以下过程仅是个人理解：&lt;/p&gt;
&lt;p&gt;域名解析 –&amp;gt; 发起TCP的3次握手 –&amp;gt; 建立TCP连接后发起http请求 –&amp;gt; 服务器响应http请求，浏览器得到html代码 –&amp;gt; 浏览器解析html代码，并请求html代码中的资源（如js、css、图片等） –&amp;gt; 浏览器对页面进行渲染呈现给用户&lt;/p&gt;
&lt;p&gt;关于HTTP协议可以参考以下：&lt;br&gt;HTTP协议漫谈  &lt;a href=&quot;http://kb.cnblogs.com/page/140611/&quot;&gt;http://kb.cnblogs.com/page/140611/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP协议概览  &lt;a href=&quot;http://www.cnblogs.com/vamei/archive/2013/05/11/3069788.html&quot;&gt;http://www.cnblogs.com/vamei/archive/2013/05/11/3069788.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;了解HTTP Headers的方方面面  &lt;a href=&quot;http://kb.cnblogs.com/page/55442/&quot;&gt;http://kb.cnblogs.com/page/55442/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://adu.404nf.cn/categories/web/"/>
    
    
      <category term="HTTP" scheme="http://adu.404nf.cn/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>单元测试</title>
    <link href="http://adu.404nf.cn/2016/04/13/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://adu.404nf.cn/2016/04/13/单元测试/</id>
    <published>2016-04-13T12:25:47.000Z</published>
    <updated>2016-04-13T12:41:18.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h1&gt;&lt;p&gt;如果你听说过“测试驱动开发”（TDD：Test-Driven Development），单元测试就不陌生。&lt;/p&gt;
&lt;p&gt;单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。&lt;/p&gt;
&lt;p&gt;比如对函数abs()，我们可以编写出以下几个测试用例：&lt;/p&gt;
&lt;p&gt;输入正数，比如1、1.2、0.99，期待返回值与输入相同；&lt;/p&gt;
&lt;p&gt;输入负数，比如-1、-1.2、-0.99，期待返回值与输入相反；&lt;/p&gt;
&lt;p&gt;输入0，期待返回0；&lt;/p&gt;
&lt;p&gt;输入非数值类型，比如None、[]、{}，期待抛出TypeError。&lt;/p&gt;
&lt;p&gt;把上面的测试用例放到一个测试模块里，就是一个完整的单元测试。&lt;/p&gt;
&lt;p&gt;如果单元测试通过，说明我们测试的这个函数能够正常工作。如果单元测试不通过，要么函数有bug，要么测试条件输入不正确，总之，需要修复使单元测试能够通过。&lt;/p&gt;
&lt;p&gt;单元测试通过后有什么意义呢？如果我们对abs()函数代码做了修改，只需要再跑一遍单元测试，如果通过，说明我们的修改不会对abs()函数原有的行为造成影响，如果测试不通过，说明我们的修改与原有行为不一致，要么修改代码，要么修改测试。&lt;/p&gt;
&lt;p&gt;这种以测试为驱动的开发模式最大的好处就是确保一个程序模块的行为符合我们设计的测试用例。在将来修改的时候，可以极大程度地保证该模块行为仍然是正确的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;我们来编写一个Dict类，这个类的行为和dict一致，但是可以通过属性来访问，用起来就像下面这样：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; d = Dict(a=1, b=2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; d[&amp;apos;a&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; d.a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;mydict.py代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dict)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, **kw)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super().__init__(**kw)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__getattr__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, key)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; KeyError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; AttributeError(&lt;span class=&quot;string&quot;&gt;r&quot;&#39;Dict&#39; object has no attribute &#39;%s&#39;&quot;&lt;/span&gt; % key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__setattr__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, key, value)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self[key] = value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了编写单元测试，我们需要引入Python自带的unittest模块，编写mydict_test.py如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; unittest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; mydict &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Dict&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestDict&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(unittest.TestCase)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test_init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d = Dict(a=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b=&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEqual(d.a, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEqual(d.b, &lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertTrue(isinstance(d, dict))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test_key&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d = Dict()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d[&lt;span class=&quot;string&quot;&gt;&#39;key&#39;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;value&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEqual(d.key, &lt;span class=&quot;string&quot;&gt;&#39;value&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test_attr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d = Dict()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d.key = &lt;span class=&quot;string&quot;&gt;&#39;value&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertTrue(&lt;span class=&quot;string&quot;&gt;&#39;key&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; d)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEqual(d[&lt;span class=&quot;string&quot;&gt;&#39;key&#39;&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&#39;value&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test_keyerror&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d = Dict()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; self.assertRaises(KeyError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            value = d[&lt;span class=&quot;string&quot;&gt;&#39;empty&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test_attrerror&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d = Dict()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; self.assertRaises(AttributeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            value = d.empty&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编写单元测试时，我们需要编写一个测试类，从unittest.TestCase继承。&lt;/p&gt;
&lt;p&gt;以test开头的方法就是测试方法，不以test开头的方法不被认为是测试方法，测试的时候不会被执行。&lt;/p&gt;
&lt;p&gt;对每一类测试都需要编写一个test_xxx()方法。由于unittest.TestCase提供了很多内置的条件判断，我们只需要调用这些方法就可以断言输出是否是我们所期望的。最常用的断言就是assertEqual()：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;self.assertEqual(abs(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# 断言函数返回的结果与1相等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另一种重要的断言就是期待抛出指定类型的Error，比如通过d[‘empty’]访问不存在的key时，断言会抛出KeyError：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; self.assertRaises(KeyError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value = d[&lt;span class=&quot;string&quot;&gt;&#39;empty&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而通过d.empty访问不存在的key时，我们期待抛出AttributeError：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; self.assertRaises(AttributeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value = d.empty&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行单元测试&lt;/p&gt;
&lt;p&gt;一旦编写好单元测试，我们就可以运行单元测试。最简单的运行方式是在mydict_test.py的最后加上两行代码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unittest.main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就可以把mydict_test.py当做正常的python脚本运行：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ python3 mydict_test.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另一种方法是在命令行通过参数-m unittest直接运行单元测试：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ python3 -m unittest mydict_test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ran 5 tests in 0.000s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是推荐的做法，因为这样可以一次批量运行很多单元测试，并且，有很多工具可以自动来运行这些单元测试。&lt;/p&gt;
&lt;p&gt;setUp与tearDown&lt;/p&gt;
&lt;p&gt;可以在单元测试中编写两个特殊的setUp()和tearDown()方法。这两个方法会分别在每调用一个测试方法的前后分别被执行。&lt;/p&gt;
&lt;p&gt;setUp()和tearDown()方法有什么用呢？设想你的测试需要启动一个数据库，这时，就可以在setUp()方法中连接数据库，在tearDown()方法中关闭数据库，这样，不必在每个测试方法中重复相同的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestDict&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(unittest.TestCase)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;setUp...&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;tearDown...&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以再次运行测试看看每个测试方法调用前后是否会打印出setUp…和tearDown…。&lt;/p&gt;
&lt;p&gt;小结&lt;/p&gt;
&lt;p&gt;单元测试可以有效地测试某个程序模块的行为，是未来重构代码的信心保证。&lt;/p&gt;
&lt;p&gt;单元测试的测试用例要覆盖常用的输入组合、边界条件和异常。&lt;/p&gt;
&lt;p&gt;单元测试代码要非常简单，如果测试代码太复杂，那么测试代码本身就可能有bug。&lt;/p&gt;
&lt;p&gt;单元测试通过了并不意味着程序就没有bug了，但是不通过程序肯定有bug。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h1&gt;&lt;p&gt;如果你听说过“测试驱动开发”（TDD：Test-Driven Development），单元测试就不陌生。&lt;/p&gt;
&lt;p&gt;单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。&lt;/p&gt;
&lt;p&gt;比如对函数abs()，我们可以编写出以下几个测试用例：&lt;/p&gt;
&lt;p&gt;输入正数，比如1、1.2、0.99，期待返回值与输入相同；&lt;/p&gt;
&lt;p&gt;输入负数，比如-1、-1.2、-0.99，期待返回值与输入相反；&lt;/p&gt;
&lt;p&gt;输入0，期待返回0；&lt;/p&gt;
&lt;p&gt;输入非数值类型，比如None、[]、{}，期待抛出TypeError。&lt;/p&gt;
&lt;p&gt;把上面的测试用例放到一个测试模块里，就是一个完整的单元测试。&lt;/p&gt;
&lt;p&gt;如果单元测试通过，说明我们测试的这个函数能够正常工作。如果单元测试不通过，要么函数有bug，要么测试条件输入不正确，总之，需要修复使单元测试能够通过。&lt;/p&gt;
&lt;p&gt;单元测试通过后有什么意义呢？如果我们对abs()函数代码做了修改，只需要再跑一遍单元测试，如果通过，说明我们的修改不会对abs()函数原有的行为造成影响，如果测试不通过，说明我们的修改与原有行为不一致，要么修改代码，要么修改测试。&lt;/p&gt;
&lt;p&gt;这种以测试为驱动的开发模式最大的好处就是确保一个程序模块的行为符合我们设计的测试用例。在将来修改的时候，可以极大程度地保证该模块行为仍然是正确的。&lt;br&gt;
    
    </summary>
    
      <category term="TDD" scheme="http://adu.404nf.cn/categories/TDD/"/>
    
    
      <category term="敏捷开发" scheme="http://adu.404nf.cn/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
      <category term="python" scheme="http://adu.404nf.cn/tags/python/"/>
    
      <category term="单元测试" scheme="http://adu.404nf.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>python函数式编程</title>
    <link href="http://adu.404nf.cn/2016/04/13/python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://adu.404nf.cn/2016/04/13/python函数式编程/</id>
    <published>2016-04-13T12:01:12.000Z</published>
    <updated>2016-04-13T12:25:19.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;关于python的函数&quot;&gt;&lt;a href=&quot;#关于python的函数&quot; class=&quot;headerlink&quot; title=&quot;关于python的函数&quot;&gt;&lt;/a&gt;关于python的函数&lt;/h1&gt;&lt;p&gt;这几天一直在看一些零散的东西，但是工作中用不到的东西如果不经常看很容易就忘了，我写博客的目的就是让自己可以经常复习，同时也把一些总结的东西拿出来给大家分享，废话不多说，进入正题：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;关于python函数调用&quot;&gt;&lt;a href=&quot;#关于python函数调用&quot; class=&quot;headerlink&quot; title=&quot;关于python函数调用&quot;&gt;&lt;/a&gt;关于python函数调用&lt;/h2&gt;&lt;p&gt;这里我只想说一种特殊的调用方式，yield相当于return，但是他返回的是一个生成器，是一个未被执行的函数，在web编程中可以用来处理阻塞问题。&lt;/p&gt;
&lt;h2 id=&quot;关于python的参数传递&quot;&gt;&lt;a href=&quot;#关于python的参数传递&quot; class=&quot;headerlink&quot; title=&quot;关于python的参数传递&quot;&gt;&lt;/a&gt;关于python的参数传递&lt;/h2&gt;&lt;p&gt;在定义函数的时候我们经常会用到的两个方法，一个是可变参数，一个是关键字参数。&lt;/p&gt;
&lt;h3 id=&quot;可变参数&quot;&gt;&lt;a href=&quot;#可变参数&quot; class=&quot;headerlink&quot; title=&quot;可变参数&quot;&gt;&lt;/a&gt;可变参数&lt;/h3&gt;&lt;p&gt;可变参数就是允许传入一个tuple或者list，写法是在变量前加星号，如def(*args)，于是你可以传入任意多个参数，包括0.&lt;/p&gt;
&lt;h3 id=&quot;关键字参数&quot;&gt;&lt;a href=&quot;#关键字参数&quot; class=&quot;headerlink&quot; title=&quot;关键字参数&quot;&gt;&lt;/a&gt;关键字参数&lt;/h3&gt;&lt;p&gt;相对可变参数来说，关键字参数就是一个dict，允许传入0或任意多个带参数名的参数，写法是**kw&lt;/p&gt;
&lt;h2 id=&quot;下面再来说说python的函数式编程&quot;&gt;&lt;a href=&quot;#下面再来说说python的函数式编程&quot; class=&quot;headerlink&quot; title=&quot;下面再来说说python的函数式编程&quot;&gt;&lt;/a&gt;下面再来说说python的函数式编程&lt;/h2&gt;&lt;p&gt;函数是Python内建支持的一种封装，我们通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计。函数就是面向过程的程序设计的基本单元。&lt;/p&gt;
&lt;p&gt;而函数式编程（请注意多了一个“式”字）——Functional Programming，虽然也可以归结到面向过程的程序设计，但其思想更接近数学计算。&lt;/p&gt;
&lt;p&gt;我们首先要搞明白计算机（Computer）和计算（Compute）的概念。&lt;/p&gt;
&lt;p&gt;在计算机的层次上，CPU执行的是加减乘除的指令代码，以及各种条件判断和跳转指令，所以，汇编语言是最贴近计算机的语言。&lt;/p&gt;
&lt;p&gt;而计算则指数学意义上的计算，越是抽象的计算，离计算机硬件越远。&lt;/p&gt;
&lt;p&gt;对应到编程语言，就是越低级的语言，越贴近计算机，抽象程度低，执行效率高，比如C语言；越高级的语言，越贴近计算，抽象程度高，执行效率低，比如Lisp语言。&lt;/p&gt;
&lt;p&gt;函数式编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出，因此，这种函数是有副作用的。&lt;/p&gt;
&lt;p&gt;函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！&lt;/p&gt;
&lt;p&gt;Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。&lt;/p&gt;
&lt;p&gt;在我前面的日志里已经提到过map/reduce/filter的用法&lt;/p&gt;
&lt;p&gt;&amp;lt;– 未完待续–&amp;gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于python的函数&quot;&gt;&lt;a href=&quot;#关于python的函数&quot; class=&quot;headerlink&quot; title=&quot;关于python的函数&quot;&gt;&lt;/a&gt;关于python的函数&lt;/h1&gt;&lt;p&gt;这几天一直在看一些零散的东西，但是工作中用不到的东西如果不经常看很容易就忘了，我写博客的目的就是让自己可以经常复习，同时也把一些总结的东西拿出来给大家分享，废话不多说，进入正题：&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://adu.404nf.cn/categories/code/"/>
    
    
      <category term="python" scheme="http://adu.404nf.cn/tags/python/"/>
    
      <category term="编程思想" scheme="http://adu.404nf.cn/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>redis、memcache、mongoDB性能总结</title>
    <link href="http://adu.404nf.cn/2016/04/03/redis%E3%80%81memcache%E3%80%81mongoDB%E6%80%A7%E8%83%BD%E6%80%BB%E7%BB%93/"/>
    <id>http://adu.404nf.cn/2016/04/03/redis、memcache、mongoDB性能总结/</id>
    <published>2016-04-03T13:03:55.000Z</published>
    <updated>2016-04-03T13:07:40.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;redis、memcache、mongoDB有哪些区别？&quot;&gt;&lt;a href=&quot;#redis、memcache、mongoDB有哪些区别？&quot; class=&quot;headerlink&quot; title=&quot;redis、memcache、mongoDB有哪些区别？&quot;&gt;&lt;/a&gt;redis、memcache、mongoDB有哪些区别？&lt;/h1&gt;&lt;h2 id=&quot;Memcached&quot;&gt;&lt;a href=&quot;#Memcached&quot; class=&quot;headerlink&quot; title=&quot;Memcached&quot;&gt;&lt;/a&gt;Memcached&lt;/h2&gt;&lt;h3 id=&quot;Memcached的优点：&quot;&gt;&lt;a href=&quot;#Memcached的优点：&quot; class=&quot;headerlink&quot; title=&quot;Memcached的优点：&quot;&gt;&lt;/a&gt;Memcached的优点：&lt;/h3&gt;&lt;p&gt;Memcached可以利用多核优势，单实例吞吐量极高，可以达到几十万QPS（取决于key、value的字节大小以及服务器硬件性能，日常环境中QPS高峰大约在4-6w左右）。适用于最大程度扛量。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;支持直接配置为session handle。&lt;br&gt;坑少。&lt;/p&gt;
&lt;h3 id=&quot;Memcached的局限性：&quot;&gt;&lt;a href=&quot;#Memcached的局限性：&quot; class=&quot;headerlink&quot; title=&quot;Memcached的局限性：&quot;&gt;&lt;/a&gt;Memcached的局限性：&lt;/h3&gt;&lt;p&gt;只支持简单的key/value数据结构，不像Redis可以支持丰富的数据类型。&lt;br&gt;无法进行持久化，数据不能备份，只能用于缓存使用，且重启后数据全部丢失。&lt;br&gt;无法进行数据同步，不能将MC中的数据迁移到其他MC实例中。&lt;br&gt;Memcached内存分配采用Slab Allocation机制管理内存，value大小分布差异较大时会造成内存利用率降低，并引发低利用率时依然出现踢出等问题。需要用户注重value设计。&lt;/p&gt;
&lt;h2 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h2&gt;&lt;h3 id=&quot;Redis的优点：&quot;&gt;&lt;a href=&quot;#Redis的优点：&quot; class=&quot;headerlink&quot; title=&quot;Redis的优点：&quot;&gt;&lt;/a&gt;Redis的优点：&lt;/h3&gt;&lt;p&gt;支持多种数据结构，如 string（字符串）、 list(双向链表)、dict(hash表)、set(集合）、zset(排序set)、hyperloglog（基数估算）&lt;br&gt;支持持久化操作，可以进行aof及rdb数据持久化到磁盘，从而进行数据备份或数据恢复等操作，较好的防止数据丢失的手段。&lt;br&gt;支持通过Replication进行数据复制，通过master-slave机制，可以实时进行数据的同步复制，支持多级复制和增量复制，master-slave机制是Redis进行HA的重要手段。&lt;br&gt;单线程请求，所有命令串行执行，并发情况下不需要考虑数据一致性问题。&lt;br&gt;支持pub/sub消息订阅机制，可以用来进行消息订阅与通知。&lt;br&gt;支持简单的事务需求，但业界使用场景很少，并不成熟。&lt;/p&gt;
&lt;h3 id=&quot;Redis的局限性：&quot;&gt;&lt;a href=&quot;#Redis的局限性：&quot; class=&quot;headerlink&quot; title=&quot;Redis的局限性：&quot;&gt;&lt;/a&gt;Redis的局限性：&lt;/h3&gt;&lt;p&gt;Redis只能使用单线程，性能受限于CPU性能，故单实例CPU最高才可能达到5-6wQPS每秒（取决于数据结构，数据大小以及服务器硬件性能，日常环境中QPS高峰大约在1-2w左右）。&lt;br&gt;支持简单的事务需求，但业界使用场景很少，并不成熟，既是优点也是缺点。&lt;br&gt;Redis在string类型上会消耗较多内存，可以使用dict（hash表）压缩存储以降低内存耗用。&lt;/p&gt;
&lt;p&gt;：）以下是我个人的补充&lt;br&gt;Mc和Redis都是Key-Value类型，不适合在不同数据集之间建立关系，也不适合进行查询搜索。比如redis的keys pattern这种匹配操作，对redis的性能是灾难。&lt;/p&gt;
&lt;h2 id=&quot;Mogodb&quot;&gt;&lt;a href=&quot;#Mogodb&quot; class=&quot;headerlink&quot; title=&quot;Mogodb&quot;&gt;&lt;/a&gt;Mogodb&lt;/h2&gt;&lt;p&gt;mogodb是一种文档性的数据库。先解释一下文档的数据库，即可以存放xml、json、bson类型系那个的数据。这些数据具备自述性（self-describing），呈现分层的树状数据结构。redis可以用hash存放简单关系型数据。&lt;br&gt;mogodb存放json格式数据。&lt;br&gt;适合场景：事件记录、内容管理或者博客平台，比如评论系统。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/q/1010000002588088/a-1020000002589415&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redis、memcache、mongoDB有哪些区别？&quot;&gt;&lt;a href=&quot;#redis、memcache、mongoDB有哪些区别？&quot; class=&quot;headerlink&quot; title=&quot;redis、memcache、mongoDB有哪些区别？&quot;&gt;&lt;/a&gt;redis、memcache、mongoDB有哪些区别？&lt;/h1&gt;&lt;h2 id=&quot;Memcached&quot;&gt;&lt;a href=&quot;#Memcached&quot; class=&quot;headerlink&quot; title=&quot;Memcached&quot;&gt;&lt;/a&gt;Memcached&lt;/h2&gt;&lt;h3 id=&quot;Memcached的优点：&quot;&gt;&lt;a href=&quot;#Memcached的优点：&quot; class=&quot;headerlink&quot; title=&quot;Memcached的优点：&quot;&gt;&lt;/a&gt;Memcached的优点：&lt;/h3&gt;&lt;p&gt;Memcached可以利用多核优势，单实例吞吐量极高，可以达到几十万QPS（取决于key、value的字节大小以及服务器硬件性能，日常环境中QPS高峰大约在4-6w左右）。适用于最大程度扛量。&lt;br&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://adu.404nf.cn/categories/SQL/"/>
    
    
      <category term="Nosql" scheme="http://adu.404nf.cn/tags/Nosql/"/>
    
      <category term="redis" scheme="http://adu.404nf.cn/tags/redis/"/>
    
      <category term="memcache" scheme="http://adu.404nf.cn/tags/memcache/"/>
    
      <category term="mongoDB" scheme="http://adu.404nf.cn/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>关于爬虫你不得不知道的几个库</title>
    <link href="http://adu.404nf.cn/2016/04/02/%E5%85%B3%E4%BA%8E%E7%88%AC%E8%99%AB%E4%BD%A0%E4%B8%8D%E5%BE%97%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E5%87%A0%E4%B8%AA%E5%BA%93/"/>
    <id>http://adu.404nf.cn/2016/04/02/关于爬虫你不得不知道的几个库/</id>
    <published>2016-04-02T02:21:33.000Z</published>
    <updated>2016-04-02T02:49:16.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;关于python爬虫&quot;&gt;&lt;a href=&quot;#关于python爬虫&quot; class=&quot;headerlink&quot; title=&quot;关于python爬虫&quot;&gt;&lt;/a&gt;关于python爬虫&lt;/h1&gt;&lt;p&gt;首先解释一下爬虫的原理，就是使用代码模拟浏览器动作通过HTTP协议远程和服务器进行交互，理论上只要是人能操作网站做的事情爬虫都可以做，比如登录，注册，获取信息，但是爬虫有两大壁垒，一个是IP禁止，一个是验证码，前一个基于网站的用户管理，后一个则基于高深莫测的图像识别（机器学习）。&lt;br&gt;除此之外，爬虫的优势是高效。&lt;br&gt;当然对于一些防御力比较低的网站是可以用爬虫进行攻击的，通过大量访问。不过这种攻击方式比较原始，而且没有技术含量。&lt;br&gt;爬虫主要还是被人们用以获取网络上的信息，该信息来自服务器，走的是HTTP协议。&lt;/p&gt;
&lt;p&gt;关于HTTP协议我就不多说了，大家可以参考我的另一篇日志&lt;a href=&quot;http://adu.404nf.cn/2016/03/30/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/&quot;&gt;HTTP协议详解&lt;/a&gt;，下面我来说说实现爬虫的流程。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;首先，爬虫要向服务器发送请求，如果请求返回200则可以提取出HTML代码，或json格式对象，或者是XML，就是我们浏览器接收到的代码（如果header配置和浏览器发出的请求header一致，返回的信息是相同的），前两种比较常见。得到服务器返回信息后我们需要进行处理，如果是json的话在python内直接用dict就可以处理了，如果是HTML则需要用到BeautifulSoup等解析工具，这里推荐使用lxml解析器，因为综合性能和易用性来看这是最优解，不要去纠结正则表达式xpath和那个什么pyQuera了，使用BeautifulSoup，支持python2和python3。&lt;br&gt;最后，对于了解过python的朋友，推荐使用gevent协程进行一个并发处理。&lt;br&gt;下面我一个个解释：&lt;/p&gt;
&lt;h2 id=&quot;requests&quot;&gt;&lt;a href=&quot;#requests&quot; class=&quot;headerlink&quot; title=&quot;requests&quot;&gt;&lt;/a&gt;requests&lt;/h2&gt;&lt;p&gt;接触python的web应用不可不知的一个库，煞是强大，官方文档供参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.python-requests.org/zh_CN/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Requests: HTTP for Humans&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外还有个高级用法：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.python-requests.org/zh_CN/latest/api.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;开发者接口&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;BeautifulSoup&quot;&gt;&lt;a href=&quot;#BeautifulSoup&quot; class=&quot;headerlink&quot; title=&quot;BeautifulSoup&quot;&gt;&lt;/a&gt;BeautifulSoup&lt;/h2&gt;&lt;p&gt;同样，没有什么比文档更好的解释：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://beautifulsoup.readthedocs.org/zh_CN/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Beautiful Soup 4.2.0 文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;gevent&quot;&gt;&lt;a href=&quot;#gevent&quot; class=&quot;headerlink&quot; title=&quot;gevent&quot;&gt;&lt;/a&gt;gevent&lt;/h2&gt;&lt;p&gt;这个我没有看官方文档，我觉得这篇文章讲的就可以：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://xlambda.com/gevent-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gevent程序员指南&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;既然说到文档&quot;&gt;&lt;a href=&quot;#既然说到文档&quot; class=&quot;headerlink&quot; title=&quot;既然说到文档&quot;&gt;&lt;/a&gt;既然说到文档&lt;/h2&gt;&lt;p&gt;不可不知的一个python文档而我却最近才知道的。。&lt;br&gt;python官方文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://python.usyiyi.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;python官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pip文档，分享给大家：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pip.pypa.io/en/stable/installing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pip&lt;/a&gt;(可惜没有中文的)&lt;/p&gt;
&lt;h2 id=&quot;最后是不是该还有个例子&quot;&gt;&lt;a href=&quot;#最后是不是该还有个例子&quot; class=&quot;headerlink&quot; title=&quot;最后是不是该还有个例子&quot;&gt;&lt;/a&gt;最后是不是该还有个例子&lt;/h2&gt;&lt;p&gt;等有空再写吧&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于python爬虫&quot;&gt;&lt;a href=&quot;#关于python爬虫&quot; class=&quot;headerlink&quot; title=&quot;关于python爬虫&quot;&gt;&lt;/a&gt;关于python爬虫&lt;/h1&gt;&lt;p&gt;首先解释一下爬虫的原理，就是使用代码模拟浏览器动作通过HTTP协议远程和服务器进行交互，理论上只要是人能操作网站做的事情爬虫都可以做，比如登录，注册，获取信息，但是爬虫有两大壁垒，一个是IP禁止，一个是验证码，前一个基于网站的用户管理，后一个则基于高深莫测的图像识别（机器学习）。&lt;br&gt;除此之外，爬虫的优势是高效。&lt;br&gt;当然对于一些防御力比较低的网站是可以用爬虫进行攻击的，通过大量访问。不过这种攻击方式比较原始，而且没有技术含量。&lt;br&gt;爬虫主要还是被人们用以获取网络上的信息，该信息来自服务器，走的是HTTP协议。&lt;/p&gt;
&lt;p&gt;关于HTTP协议我就不多说了，大家可以参考我的另一篇日志&lt;a href=&quot;http://adu.404nf.cn/2016/03/30/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/&quot;&gt;HTTP协议详解&lt;/a&gt;，下面我来说说实现爬虫的流程。&lt;br&gt;
    
    </summary>
    
      <category term="crawler" scheme="http://adu.404nf.cn/categories/crawler/"/>
    
    
      <category term="爬虫" scheme="http://adu.404nf.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="http://adu.404nf.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python函数调用小技巧</title>
    <link href="http://adu.404nf.cn/2016/04/02/python%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://adu.404nf.cn/2016/04/02/python函数调用小技巧/</id>
    <published>2016-04-02T01:54:08.000Z</published>
    <updated>2016-04-02T02:00:23.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;【python特殊用法】filter-map-reduce-lambda&quot;&gt;&lt;a href=&quot;#【python特殊用法】filter-map-reduce-lambda&quot; class=&quot;headerlink&quot; title=&quot;【python特殊用法】filter,map,reduce.lambda&quot;&gt;&lt;/a&gt;【python特殊用法】filter,map,reduce.lambda&lt;/h1&gt;&lt;p&gt;python的兴起其中一个不容忽视的因素就是他的简洁和易读，要想写好python代码以下几个方法你不得不知道：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;filter&quot;&gt;&lt;a href=&quot;#filter&quot; class=&quot;headerlink&quot; title=&quot;filter&quot;&gt;&lt;/a&gt;filter&lt;/h2&gt;&lt;p&gt;filter(function, sequence):&lt;br&gt;对sequence中的item依次执行function(item)，将执行结果为True的item组成一个List/String/Tuple(取决于sequence类型）返回，示例如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; x % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;filter(f, range(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x != &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;filter(f, &lt;span class=&quot;string&quot;&gt;&quot;abcdef&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;bcdef&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot; class=&quot;headerlink&quot; title=&quot;map&quot;&gt;&lt;/a&gt;map&lt;/h2&gt;&lt;p&gt;map(function, sequence):&lt;br&gt;对sequence中的item依次执行function（item），将执行结果组成一个List返回&lt;br&gt;另外map也支持多个sequence，当然这也要求function支持相应数量的参数输入，示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x*x*x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;map(cube, range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;125&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;216&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;343&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;729&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cube&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt; :&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x, y)&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x+y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;map(add, range(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;), range(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;reduce&quot;&gt;&lt;a href=&quot;#reduce&quot; class=&quot;headerlink&quot; title=&quot;reduce&quot;&gt;&lt;/a&gt;reduce&lt;/h2&gt;&lt;p&gt;reduce（function，sequence，starting_value):&lt;br&gt;对sequence中的item顺序迭代调用function，如果有starting_value，还可以作为初始值调用，例如可以用来对List求和，示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x,y)&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;gt;&amp;gt;&amp;gt; reduce(add, range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（注：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;reduce(add, range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（注：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;lambda：&quot;&gt;&lt;a href=&quot;#lambda：&quot; class=&quot;headerlink&quot; title=&quot;lambda：&quot;&gt;&lt;/a&gt;lambda：&lt;/h2&gt;&lt;p&gt;这是python支持一种有趣的语法，它允许你快速定义单行的最小函数，类似C语言中的宏，可以用在任何需要函数的地方，示例如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;g = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;g(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们也可以把filter map reduce 和lambda结合起来用，函数就可以简单的写成一行。例如&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;kmpathes = filter(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; kmpath: kmpath, map(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; kmpath: string.strip(kmpath), string.split(l, &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看起来麻烦，其实就像用语言来描述问题一样，非常优雅。&lt;br&gt;对 l 中的所有元素以’:’做分割，得出一个列表。对这个列表的每一个元素做字符串strip，形成一个列表。对这个列表的每一个元素做直接返回操作(这个地方可以加上过滤条件限制)，最终获得一个字符串被’:’分割的列表，列表中的每一个字符串都做了strip，并可以对特殊字符串过滤。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/81b12f4eae3a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;【python特殊用法】filter-map-reduce-lambda&quot;&gt;&lt;a href=&quot;#【python特殊用法】filter-map-reduce-lambda&quot; class=&quot;headerlink&quot; title=&quot;【python特殊用法】filter,map,reduce.lambda&quot;&gt;&lt;/a&gt;【python特殊用法】filter,map,reduce.lambda&lt;/h1&gt;&lt;p&gt;python的兴起其中一个不容忽视的因素就是他的简洁和易读，要想写好python代码以下几个方法你不得不知道：&lt;br&gt;
    
    </summary>
    
      <category term="code" scheme="http://adu.404nf.cn/categories/code/"/>
    
    
      <category term="代码优化" scheme="http://adu.404nf.cn/tags/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    
      <category term="python" scheme="http://adu.404nf.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议详解</title>
    <link href="http://adu.404nf.cn/2016/03/30/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://adu.404nf.cn/2016/03/30/HTTP协议详解/</id>
    <published>2016-03-30T13:02:31.000Z</published>
    <updated>2016-03-31T14:39:44.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;HTTP协议详解&quot;&gt;&lt;a href=&quot;#HTTP协议详解&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议详解&quot;&gt;&lt;/a&gt;HTTP协议详解&lt;/h1&gt;&lt;p&gt;这是一篇想写了很久却迟迟没有动笔的题目&lt;/p&gt;
&lt;p&gt;从开始接触爬虫，或者说接触web开始，你就是在和http协议打交道了，我想web这个职业只要http协议不过时应该就不会有太大的变化。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;好，下面是正文:&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;先说说HTTP协议是怎样工作的：&lt;br&gt;步骤1：浏览器首先向服务器发送HTTP请求，请求包括：&lt;/p&gt;
&lt;p&gt;方法：GET还是POST，GET仅请求资源，POST会附带用户数据；&lt;/p&gt;
&lt;p&gt;路径：/full/url/path；&lt;/p&gt;
&lt;p&gt;域名：由Host头指定：Host: www.sina.com.cn&lt;/p&gt;
&lt;p&gt;以及其他相关的Header；&lt;/p&gt;
&lt;p&gt;如果是POST，那么请求还包括一个Body，包含用户数据。&lt;/p&gt;
&lt;p&gt;步骤2：服务器向浏览器返回HTTP响应，响应包括：&lt;/p&gt;
&lt;p&gt;响应代码：200表示成功，3xx表示重定向，4xx表示客户端发送的请求有错误，5xx表示服务器端处理时发生了错误；&lt;/p&gt;
&lt;p&gt;响应类型：由Content-Type指定；&lt;/p&gt;
&lt;p&gt;以及其他相关的Header；&lt;/p&gt;
&lt;p&gt;通常服务器的HTTP响应会携带内容，也就是有一个Body，包含响应的内容，网页的HTML源码就在Body中。&lt;/p&gt;
&lt;p&gt;步骤3：如果浏览器还需要继续向服务器请求其他资源，比如图片，就再次发出HTTP请求，重复步骤1、2。&lt;/p&gt;
&lt;p&gt;Web采用的HTTP协议采用了非常简单的请求-响应模式，从而大大简化了开发。当我们编写一个页面时，我们只需要在HTTP请求中把HTML发送出去，不需要考虑如何附带图片、视频等，浏览器如果需要请求图片和视频，它会发送另一个HTTP请求，因此，一个HTTP请求只处理一个资源。&lt;/p&gt;
&lt;p&gt;HTTP协议同时具备极强的扩展性，虽然浏览器请求的是 &lt;a href=&quot;http://www.sina.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.sina.com.cn/&lt;/a&gt; 的首页，但是新浪在HTML中可以链入其他服务器的资源，比如&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;img src=&amp;quot;http://i1.sinaimg.cn/home/2013/1008/U8455P30DT20131008135420.png&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;，从而将请求压力分散到各个服务器上，并且，一个站点可以链接到其他站点，无数个站点互相链接起来，就形成了World Wide Web，简称WWW。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;超文本传输协议&quot;&gt;&lt;a href=&quot;#超文本传输协议&quot; class=&quot;headerlink&quot; title=&quot;超文本传输协议&quot;&gt;&lt;/a&gt;超文本传输协议&lt;/h2&gt;&lt;p&gt;http就是用于规范客户端和服务器之间文本传输的一个协议，我们在访问网站的时候大多数时候都是通过这个协议从服务器上获取想要的数据的。&lt;/p&gt;
&lt;h3 id=&quot;从get方法和post方法谈起&quot;&gt;&lt;a href=&quot;#从get方法和post方法谈起&quot; class=&quot;headerlink&quot; title=&quot;从get方法和post方法谈起&quot;&gt;&lt;/a&gt;从get方法和post方法谈起&lt;/h3&gt;&lt;p&gt;最早让我想要弄清楚HTTP协议是源于我在写爬虫的时候使用python的requests模块，经常会弄不清楚到底该用get方法还是post方法，比较通俗的说法是post方法比较安全，可以带data，get方法就是url请求，请求体全部都暴露在url里面，较不安全，然而研究后发现，HTTP的四种方法get,post,put,delete方法并没有本质上的区别，协议本身并没有强制规范什么情况下必须使用什么请求，事实上这几种请求方法的格式是一样的。&lt;/p&gt;
&lt;h3 id=&quot;请求方法&quot;&gt;&lt;a href=&quot;#请求方法&quot; class=&quot;headerlink&quot; title=&quot;请求方法&quot;&gt;&lt;/a&gt;请求方法&lt;/h3&gt;&lt;p&gt;请求方法（所有方法全为大写）有多种，各个方法的解释如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET     请求获取Request-URI所标识的资源
POST    在Request-URI所标识的资源后附加新的数据
HEAD    请求获取由Request-URI所标识的资源的响应消息报头
PUT     请求服务器存储一个资源，并用Request-URI作为其标识
DELETE  请求服务器删除Request-URI所标识的资源
TRACE   请求服务器回送收到的请求信息，主要用于测试或诊断
CONNECT 保留将来使用    
OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;header&quot;&gt;&lt;a href=&quot;#header&quot; class=&quot;headerlink&quot; title=&quot;header&quot;&gt;&lt;/a&gt;header&lt;/h2&gt;&lt;h3 id=&quot;General-Header（通用头）&quot;&gt;&lt;a href=&quot;#General-Header（通用头）&quot; class=&quot;headerlink&quot; title=&quot;General Header（通用头）&quot;&gt;&lt;/a&gt;General Header（通用头）&lt;/h3&gt;&lt;p&gt;HTTP里的通用头既可以包含在请求头中也可以包含在响应头中，作用主要是描述HTTO协议本身，下面举例几个常见的通用头：&lt;/p&gt;
&lt;h4 id=&quot;Cache-Control头域&quot;&gt;&lt;a href=&quot;#Cache-Control头域&quot; class=&quot;headerlink&quot; title=&quot;Cache-Control头域&quot;&gt;&lt;/a&gt;Cache-Control头域&lt;/h4&gt;&lt;p&gt;Cache-Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、max-age、max-stale、min-fresh、only-if-cached，响应消息中的指令包括public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age。各个消息中的指令含义如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Public指示响应可被任何缓存区缓存。&lt;/li&gt;
&lt;li&gt;Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。&lt;/li&gt;
&lt;li&gt;no-cache指示请求或响应消息不能缓存&lt;/li&gt;
&lt;li&gt;no-store用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。&lt;/li&gt;
&lt;li&gt;max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。&lt;/li&gt;
&lt;li&gt;min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应。&lt;/li&gt;
&lt;li&gt;max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;HTTP-Keep-Alive&quot;&gt;&lt;a href=&quot;#HTTP-Keep-Alive&quot; class=&quot;headerlink&quot; title=&quot;HTTP Keep-Alive&quot;&gt;&lt;/a&gt;HTTP Keep-Alive&lt;/h4&gt;&lt;p&gt;Keep-Alive功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。市场上的大部分Web服务器，包括iPlanet、IIS和Apache，都支持HTTP Keep-Alive。对于提供静态内容的网站来说，这个功能通常很有用。但是，对于负担较重的网站来说，这里存在另外一个问题：虽然为客户保留打开的连接有一定的好处，但它同样影响了性能，因为在处理暂停期间，本来可以释放的资源仍旧被占用。当Web服务器和应用服务器在同一台机器上运行时，Keep- Alive功能对资源利用的影响尤其突出。&lt;br&gt;KeepAliveTime 值控制 TCP/IP 尝试验证空闲连接是否完好的频率。如果这段时间内没有活动，则会发送保持活动信号。如果网络工作正常，而且接收方是活动的，它就会响应。如果需要对丢失接收方敏感，换句话说，需要更快地发现丢失了接收方，请考虑减小这个值。如果长期不活动的空闲连接出现次数较多，而丢失接收方的情况出现较少，您可能会要提高该值以减少开销。缺省情况下，如果空闲连接 7200000 毫秒（2 小时）内没有活动，Windows 就发送保持活动的消息。通常，1800000 毫秒是首选值，从而一半的已关闭连接会在 30 分钟内被检测到。 KeepAliveInterval 值定义了如果未从接收方收到保持活动消息的响应，TCP/IP 重复发送保持活动信号的频率。当连续发送保持活动信号、但未收到响应的次数超出 TcpMaxDataRetransmissions 的值时，会放弃该连接。如果期望较长的响应时间，您可能需要提高该值以减少开销。如果需要减少花在验证接收方是否已丢失上的时间，请考虑减小该值或 TcpMaxDataRetransmissions 值。缺省情况下，在未收到响应而重新发送保持活动的消息之前，Windows 会等待 1000 毫秒（1 秒）。 KeepAliveTime 根据你的需要设置就行，比如10分钟，注意要转换成MS。 XXX代表这个间隔值得大小。&lt;/p&gt;
&lt;h4 id=&quot;Date头域&quot;&gt;&lt;a href=&quot;#Date头域&quot; class=&quot;headerlink&quot; title=&quot;Date头域&quot;&gt;&lt;/a&gt;Date头域&lt;/h4&gt;&lt;p&gt;Date头域表示消息发送的时间，时间的描述格式由rfc822定义。例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。&lt;/p&gt;
&lt;h4 id=&quot;Pragma头域&quot;&gt;&lt;a href=&quot;#Pragma头域&quot; class=&quot;headerlink&quot; title=&quot;Pragma头域&quot;&gt;&lt;/a&gt;Pragma头域&lt;/h4&gt;&lt;p&gt;Pragma头域用来包含实现特定的指令，最常用的是Pragma:no-cache。在HTTP/1.1协议中，它的含义和Cache-Control:no-cache相同。&lt;/p&gt;
&lt;h3 id=&quot;Entity-header-实体头&quot;&gt;&lt;a href=&quot;#Entity-header-实体头&quot; class=&quot;headerlink&quot; title=&quot;Entity header(实体头)&quot;&gt;&lt;/a&gt;Entity header(实体头)&lt;/h3&gt;&lt;p&gt;请求消息和响应消息都可以包含实体信息，实体信息一般由实体头域和实体组成。实体头域包含关于实体的原信息，实体头包括Allow、Content-Base、Content-Encoding、Content-Language、Content-Length、Content-Location、Content-MD5、Content-Range、Content-Type、Etag、Expires、Last-Modified、extension-header。extension-header允许客户端定义新的实体头，但是这些域可能无法被接受方识别。实体可以是一个经过编码的字节流，它的编码方式由Content-Encoding或Content-Type定义，它的长度由Content-Length或Content-Range定义。&lt;/p&gt;
&lt;h4 id=&quot;Content-Type实体头&quot;&gt;&lt;a href=&quot;#Content-Type实体头&quot; class=&quot;headerlink&quot; title=&quot;Content-Type实体头&quot;&gt;&lt;/a&gt;Content-Type实体头&lt;/h4&gt;&lt;p&gt;Content-Type实体头用于向接收方指示实体的介质类型，指定HEAD方法送到接收方的实体介质类型，或GET方法发送的请求介质类型&lt;/p&gt;
&lt;h4 id=&quot;Content-Range实体头&quot;&gt;&lt;a href=&quot;#Content-Range实体头&quot; class=&quot;headerlink&quot; title=&quot;Content-Range实体头&quot;&gt;&lt;/a&gt;Content-Range实体头&lt;/h4&gt;&lt;p&gt;Content-Range实体头用于指定整个实体中的一部分的插入位置，他也指示了整个实体的长度。在服务器向客户返回一个部分响应，它必须描述响应覆盖的范围和整个实体长度。一般格式：&lt;br&gt;Content-Range:bytes-unitSPfirst-byte-pos-last-byte-pos/entity-legth&lt;br&gt;例如，传送头500个字节次字段的形式：Content-Range:bytes0-499/1234如果一个http消息包含此节（例如，对范围请求的响应或对一系列范围的重叠请求），Content-Range表示传送的范围，Content-Length表示实际传送的字节数。&lt;/p&gt;
&lt;h4 id=&quot;Last-modified实体头&quot;&gt;&lt;a href=&quot;#Last-modified实体头&quot; class=&quot;headerlink&quot; title=&quot;Last-modified实体头&quot;&gt;&lt;/a&gt;Last-modified实体头&lt;/h4&gt;&lt;p&gt;Last-modified实体头指定服务器上保存内容的最后修订时间。&lt;br&gt;例如，传送头500个字节次字段的形式：Content-Range:bytes0-499/1234如果一个http消息包含此节（例如，对范围请求的响应或对一系列范围的重叠请求），Content-Range表示传送的范围，Content-Length表示实际传送的字节数。&lt;/p&gt;
&lt;h3 id=&quot;HTTP-Request-Header（请求头）&quot;&gt;&lt;a href=&quot;#HTTP-Request-Header（请求头）&quot; class=&quot;headerlink&quot; title=&quot;HTTP Request Header（请求头）&quot;&gt;&lt;/a&gt;HTTP Request Header（请求头）&lt;/h3&gt;&lt;p&gt;这就是我们最常见的header了，请求报头允许客户端向服务器端传递请求的附加信息以及客户端自身的信息。&lt;br&gt;以下为常见的请求报头：&lt;/p&gt;
&lt;h4 id=&quot;Accept&quot;&gt;&lt;a href=&quot;#Accept&quot; class=&quot;headerlink&quot; title=&quot;Accept&quot;&gt;&lt;/a&gt;Accept&lt;/h4&gt;&lt;p&gt;Accept请求报头域用于指定客户端接受哪些类型的信息。eg：Accept：image/gif，表明客户端希望接受GIF图象格式的资源；Accept：text/html，表明客户端希望接受html文本。&lt;/p&gt;
&lt;h4 id=&quot;Accept-Charset&quot;&gt;&lt;a href=&quot;#Accept-Charset&quot; class=&quot;headerlink&quot; title=&quot;Accept-Charset&quot;&gt;&lt;/a&gt;Accept-Charset&lt;/h4&gt;&lt;p&gt;Accept-Charset请求报头域用于指定客户端接受的字符集。eg：Accept-Charset:iso-8859-1,gb2312.如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。&lt;/p&gt;
&lt;h4 id=&quot;Accept-Encoding&quot;&gt;&lt;a href=&quot;#Accept-Encoding&quot; class=&quot;headerlink&quot; title=&quot;Accept-Encoding&quot;&gt;&lt;/a&gt;Accept-Encoding&lt;/h4&gt;&lt;p&gt;Accept-Encoding请求报头域类似于Accept，但是它是用于指定可接受的内容编码。eg：Accept-Encoding:gzip.deflate.如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。&lt;/p&gt;
&lt;h4 id=&quot;Accept-Language&quot;&gt;&lt;a href=&quot;#Accept-Language&quot; class=&quot;headerlink&quot; title=&quot;Accept-Language&quot;&gt;&lt;/a&gt;Accept-Language&lt;/h4&gt;&lt;p&gt;Accept-Language请求报头域类似于Accept，但是它是用于指定一种自然语言。eg：Accept-Language:zh-cn.如果请求消息中没有设置这个报头域，服务器假定客户端对各种语言都可以接受。&lt;/p&gt;
&lt;h4 id=&quot;Authorization&quot;&gt;&lt;a href=&quot;#Authorization&quot; class=&quot;headerlink&quot; title=&quot;Authorization&quot;&gt;&lt;/a&gt;Authorization&lt;/h4&gt;&lt;p&gt;Authorization请求报头域主要用于证明客户端有权查看某个资源。当浏览器访问一个页面时，如果收到服务器的响应代码为401（未授权），可以发送一个包含Authorization请求报头域的请求，要求服务器对其进行验证。&lt;/p&gt;
&lt;h4 id=&quot;Host（发送请求时，该报头域是必需的）&quot;&gt;&lt;a href=&quot;#Host（发送请求时，该报头域是必需的）&quot; class=&quot;headerlink&quot; title=&quot;Host（发送请求时，该报头域是必需的）&quot;&gt;&lt;/a&gt;Host（发送请求时，该报头域是必需的）&lt;/h4&gt;&lt;p&gt;Host请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的，eg：&lt;br&gt;我们在浏览器中输入：&lt;a href=&quot;http://www.guet.edu.cn/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.guet.edu.cn/index.html&lt;/a&gt;&lt;br&gt;浏览器发送的请求消息中，就会包含Host请求报头域，如下：&lt;br&gt;Host：www.guet.edu.cn&lt;br&gt;此处使用缺省端口号80，若指定了端口号，则变成：Host：www.guet.edu.cn:指定端口号&lt;/p&gt;
&lt;h4 id=&quot;Referer头域&quot;&gt;&lt;a href=&quot;#Referer头域&quot; class=&quot;headerlink&quot; title=&quot;Referer头域&quot;&gt;&lt;/a&gt;Referer头域&lt;/h4&gt;&lt;p&gt;Referer头域允许客户端指定请求uri的源资源地址，这可以允许服务器生成回退链表，可用来登陆、优化cache等。他也允许废除的或错误的连接由于维护的目的被追踪。如果请求的uri没有自己的uri地址，Referer不能被发送。如果指定的是部分uri地址，则此地址应该是一个相对地址。&lt;/p&gt;
&lt;h4 id=&quot;User-Agent&quot;&gt;&lt;a href=&quot;#User-Agent&quot; class=&quot;headerlink&quot; title=&quot;User-Agent&quot;&gt;&lt;/a&gt;User-Agent&lt;/h4&gt;&lt;p&gt;我们上网登陆论坛的时候，往往会看到一些欢迎信息，其中列出了你的操作系统的名称和版本，你所使用的浏览器的名称和版本，这往往让很多人感到很神奇，实际上，服务器应用程序就是从User-Agent这个请求报头域中获取到这些信息。User-Agent请求报头域允许客户端将它的操作系统、浏览器和其它属性告诉服务器。不过，这个报头域不是必需的，如果我们自己编写一个浏览器，不使用User-Agent请求报头域，那么服务器端就无法得知我们的信息了。&lt;/p&gt;
&lt;p&gt;请求报头举例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GET /form.html HTTP/1.1 (CRLF)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Accept:image/gif,image/x-xbitmap,image/jpeg,application/x-shockwave-flash,application/vnd.ms-excel,application/vnd.ms-powerpoint,application/msword,*/* (CRLF)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Accept-Language:zh-cn (CRLF)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Accept-Encoding:gzip,deflate (CRLF)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If-Modified-Since:Wed,05 Jan 2007 11:21:25 GMT (CRLF)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If-None-Match:W/&amp;quot;80b1a4c018f3c41:8317&amp;quot; (CRLF)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;User-Agent:Mozilla/4.0(compatible;MSIE6.0;Windows NT 5.0) (CRLF)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Host:www.guet.edu.cn (CRLF)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection:Keep-Alive (CRLF)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(CRLF)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;body&quot;&gt;&lt;a href=&quot;#body&quot; class=&quot;headerlink&quot; title=&quot;body&quot;&gt;&lt;/a&gt;body&lt;/h2&gt;&lt;p&gt;body包涵请求的实体。&lt;/p&gt;
&lt;h2 id=&quot;Response&quot;&gt;&lt;a href=&quot;#Response&quot; class=&quot;headerlink&quot; title=&quot;Response&quot;&gt;&lt;/a&gt;Response&lt;/h2&gt;&lt;h3 id=&quot;状态码&quot;&gt;&lt;a href=&quot;#状态码&quot; class=&quot;headerlink&quot; title=&quot;状态码&quot;&gt;&lt;/a&gt;状态码&lt;/h3&gt;&lt;p&gt;响应消息的第一行为下面的格式：&lt;br&gt;HTTP-VersionSPStatus-CodeSPReason-PhraseCRLF&lt;br&gt;HTTP-Version表示支持的HTTP版本，例如为HTTP/1.1。Status-Code是一个三个数字的结果代码。Reason-Phrase给Status-Code提供一个简单的文本描述。Status-Code主要用于机器自动识别，Reason-Phrase主要用于帮助用户理解。Status-Code的第一个数字定义响应的类别，后两个数字没有分类的作用。第一个数字可能取5个不同的值：&lt;br&gt;1xx:信息响应类，表示接收到请求并且继续处理&lt;br&gt;2xx:处理成功响应类，表示动作被成功接收、理解和接受&lt;br&gt;3xx:重定向响应类，为了完成指定的动作，必须接受进一步处理&lt;br&gt;4xx:客户端错误，客户请求包含语法错误或者是不能正确执行&lt;br&gt;5xx:服务端错误，服务器不能正确执行一个正确的请求&lt;/p&gt;
&lt;h3 id=&quot;响应头&quot;&gt;&lt;a href=&quot;#响应头&quot; class=&quot;headerlink&quot; title=&quot;响应头&quot;&gt;&lt;/a&gt;响应头&lt;/h3&gt;&lt;p&gt;响应头域允许服务器传递不能放在状态行的附加信息，这些域主要描述服务器的信息和Request-URI进一步的信息。响应头域包含Age、Location、Proxy-Authenticate、Public、Retry-After、Server、Vary、Warning、WWW-Authenticate。对响应头域的扩展要求通讯双方都支持，如果存在不支持的响应头域，一般将会作为实体头域处理。&lt;/p&gt;
&lt;h3 id=&quot;典型的响应消息：&quot;&gt;&lt;a href=&quot;#典型的响应消息：&quot; class=&quot;headerlink&quot; title=&quot;典型的响应消息：&quot;&gt;&lt;/a&gt;典型的响应消息：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HTTP/1.0200OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date:Mon,31Dec200104:25:57GMT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server:Apache/1.3.14(Unix)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-type:text/html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Last-modified:Tue,17Apr200106:46:28GMT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Etag:&amp;quot;a030f020ac7c01:1e9f&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-length:39725426&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-range:bytes55******/40279980&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;上例第一行表示HTTP服务端响应一个GET方法。棕色的部分表示响应头域的信息，绿色的部分表示通用头部分，红色的部分表示实体头域的信息。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Location响应头&quot;&gt;&lt;a href=&quot;#Location响应头&quot; class=&quot;headerlink&quot; title=&quot;Location响应头&quot;&gt;&lt;/a&gt;Location响应头&lt;/h4&gt;&lt;p&gt;Location响应头用于重定向接收者到一个新URI地址。&lt;/p&gt;
&lt;h4 id=&quot;Server响应头&quot;&gt;&lt;a href=&quot;#Server响应头&quot; class=&quot;headerlink&quot; title=&quot;Server响应头&quot;&gt;&lt;/a&gt;Server响应头&lt;/h4&gt;&lt;p&gt;Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。&lt;/p&gt;
&lt;h2 id=&quot;实体信息&quot;&gt;&lt;a href=&quot;#实体信息&quot; class=&quot;headerlink&quot; title=&quot;实体信息&quot;&gt;&lt;/a&gt;实体信息&lt;/h2&gt;&lt;p&gt;请求消息和响应消息都可以包含实体信息，实体信息一般由实体头域和实体组成。实体头域包含关于实体的原信息，实体头包括Allow、Content-Base、Content-Encoding、Content-Language、Content-Length、Content-Location、Content-MD5、Content-Range、Content-Type、Etag、Expires、Last-Modified、extension-header。extension-header允许客户端定义新的实体头，但是这些域可能无法被接受方识别。实体可以是一个经过编码的字节流，它的编码方式由Content-Encoding或Content-Type定义，它的长度由Content-Length或Content-Range定义。&lt;/p&gt;
&lt;h3 id=&quot;Content-Type实体头-1&quot;&gt;&lt;a href=&quot;#Content-Type实体头-1&quot; class=&quot;headerlink&quot; title=&quot;Content-Type实体头&quot;&gt;&lt;/a&gt;Content-Type实体头&lt;/h3&gt;&lt;p&gt;Content-Type实体头用于向接收方指示实体的介质类型，指定HEAD方法送到接收方的实体介质类型，或GET方法发送的请求介质类型&lt;/p&gt;
&lt;h3 id=&quot;Content-Range实体头-1&quot;&gt;&lt;a href=&quot;#Content-Range实体头-1&quot; class=&quot;headerlink&quot; title=&quot;Content-Range实体头&quot;&gt;&lt;/a&gt;Content-Range实体头&lt;/h3&gt;&lt;p&gt;Content-Range实体头用于指定整个实体中的一部分的插入位置，他也指示了整个实体的长度。在服务器向客户返回一个部分响应，它必须描述响应覆盖的范围和整个实体长度。一般格式：&lt;br&gt;Content-Range:bytes-unitSPfirst-byte-pos-last-byte-pos/entity-legth&lt;br&gt;例如，传送头500个字节次字段的形式：Content-Range:bytes0-499/1234如果一个http消息包含此节（例如，对范围请求的响应或对一系列范围的重叠请求），Content-Range表示传送的范围，Content-Length表示实际传送的字节数。&lt;/p&gt;
&lt;h3 id=&quot;Last-modified实体头-1&quot;&gt;&lt;a href=&quot;#Last-modified实体头-1&quot; class=&quot;headerlink&quot; title=&quot;Last-modified实体头&quot;&gt;&lt;/a&gt;Last-modified实体头&lt;/h3&gt;&lt;p&gt;Last-modified实体头指定服务器上保存内容的最后修订时间。&lt;br&gt;例如，传送头500个字节次字段的形式：Content-Range:bytes0-499/1234如果一个http消息包含此节（例如，对范围请求的响应或对一系列范围的重叠请求），Content-Range表示传送的范围，Content-Length表示实际传送的字节数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;熟悉HTTP是web工程师的基本功&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP协议详解&quot;&gt;&lt;a href=&quot;#HTTP协议详解&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议详解&quot;&gt;&lt;/a&gt;HTTP协议详解&lt;/h1&gt;&lt;p&gt;这是一篇想写了很久却迟迟没有动笔的题目&lt;/p&gt;
&lt;p&gt;从开始接触爬虫，或者说接触web开始，你就是在和http协议打交道了，我想web这个职业只要http协议不过时应该就不会有太大的变化。&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://adu.404nf.cn/categories/web/"/>
    
    
      <category term="爬虫" scheme="http://adu.404nf.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="web" scheme="http://adu.404nf.cn/tags/web/"/>
    
      <category term="HTTP" scheme="http://adu.404nf.cn/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>推荐几个学习python还不错的网站</title>
    <link href="http://adu.404nf.cn/2016/03/29/%E6%8E%A8%E8%8D%90%E5%87%A0%E4%B8%AA%E5%AD%A6%E4%B9%A0python%E8%BF%98%E4%B8%8D%E9%94%99%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>http://adu.404nf.cn/2016/03/29/推荐几个学习python还不错的网站/</id>
    <published>2016-03-29T13:16:04.000Z</published>
    <updated>2016-03-31T14:38:57.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;推荐几个学习python还不错的网站&quot;&gt;&lt;a href=&quot;#推荐几个学习python还不错的网站&quot; class=&quot;headerlink&quot; title=&quot;推荐几个学习python还不错的网站&quot;&gt;&lt;/a&gt;推荐几个学习python还不错的网站&lt;/h1&gt;&lt;p&gt;一开始自学python我去过慕课网和极客学院，这种学习网站比较系统化但是缺点是不便于记忆和不方便查阅，到后面我才发现文档才是最好的老师。不过还是有些个人博客，网站写的比较好的，在这里推荐两个：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;廖雪峰的官方网站&quot;&gt;&lt;a href=&quot;#廖雪峰的官方网站&quot; class=&quot;headerlink&quot; title=&quot;廖雪峰的官方网站&quot;&gt;&lt;/a&gt;廖雪峰的官方网站&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.liaoxuefeng.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个主要是python3和js，git讲得也不错，通俗易懂，适合新手&lt;/p&gt;
&lt;h2 id=&quot;菜鸟教程&quot;&gt;&lt;a href=&quot;#菜鸟教程&quot; class=&quot;headerlink&quot; title=&quot;菜鸟教程&quot;&gt;&lt;/a&gt;菜鸟教程&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.runoob.com/python/python-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.runoob.com/python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;菜鸟教程很多课程都不错，东西还比较多&lt;/p&gt;
&lt;h2 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.python.org/3/library/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外，最好的老师，还是官方文档，这里附上python3官方文档的地址&lt;/p&gt;
&lt;h2 id=&quot;再来个python包下载地址&quot;&gt;&lt;a href=&quot;#再来个python包下载地址&quot; class=&quot;headerlink&quot; title=&quot;再来个python包下载地址&quot;&gt;&lt;/a&gt;再来个python包下载地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/pythonlibs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.lfd.uci.edu/~gohlke/pythonlibs/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;推荐几个学习python还不错的网站&quot;&gt;&lt;a href=&quot;#推荐几个学习python还不错的网站&quot; class=&quot;headerlink&quot; title=&quot;推荐几个学习python还不错的网站&quot;&gt;&lt;/a&gt;推荐几个学习python还不错的网站&lt;/h1&gt;&lt;p&gt;一开始自学python我去过慕课网和极客学院，这种学习网站比较系统化但是缺点是不便于记忆和不方便查阅，到后面我才发现文档才是最好的老师。不过还是有些个人博客，网站写的比较好的，在这里推荐两个：&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="http://adu.404nf.cn/categories/study/"/>
    
    
      <category term="python" scheme="http://adu.404nf.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python代码优化小技巧</title>
    <link href="http://adu.404nf.cn/2016/03/29/python%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://adu.404nf.cn/2016/03/29/python代码优化小技巧/</id>
    <published>2016-03-29T12:26:33.000Z</published>
    <updated>2016-03-31T14:37:18.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;python代码优化小技巧&quot;&gt;&lt;a href=&quot;#python代码优化小技巧&quot; class=&quot;headerlink&quot; title=&quot;python代码优化小技巧&quot;&gt;&lt;/a&gt;python代码优化小技巧&lt;/h1&gt;&lt;p&gt;一个良好的算法能够对性能起到关键作用，因此性能改进的首要点是对算法的改进。在算法的时间复杂度排序上依次是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; O(1) -&amp;gt; O(lg n) -&amp;gt; O(n lg n) -&amp;gt; O(n^2) -&amp;gt; O(n^3) -&amp;gt; O(n^k) -&amp;gt; O(k^n) -&amp;gt; O(n!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此如果能够在时间复杂度上对算法进行一定的改进，对性能的提高不言而喻。但对具体算法的改进不属于本文讨论的范围，读者可以自行参考这方面资料。下面的内容将集中讨论数据结构的选择。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;字典-dictionary-与列表-list&quot;&gt;&lt;a href=&quot;#字典-dictionary-与列表-list&quot; class=&quot;headerlink&quot; title=&quot;字典 (dictionary) 与列表 (list)&quot;&gt;&lt;/a&gt;字典 (dictionary) 与列表 (list)&lt;/h2&gt;&lt;p&gt;Python 字典中使用了 hash table，因此查找操作的复杂度为 O(1)，而 list 实际是个数组，在 list 中，查找需要遍历整个 list，其复杂度为 O(n)，因此对成员的查找访问等操作字典要比 list 更快。&lt;/p&gt;
&lt;p&gt;清单 1. 代码 dict.py&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; t = time() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; list = [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;is&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;python&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;jason&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;hill&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;with&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;phone&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;dfdf&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;apple&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;pddf&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;ind&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;basic&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;none&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;baecr&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;var&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;bana&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;dd&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;wrd&#39;&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;#list = dict.fromkeys(list,True) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; filter = [] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range (&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;): &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; find &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&#39;is&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;hat&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;new&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;list&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;old&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;]: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; find &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; list: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             filter.append(find) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; print(&lt;span class=&quot;string&quot;&gt;&quot;total run time:&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; print(time()-t)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述代码运行大概需要 16.09seconds。如果去掉行 #list = dict.fromkeys(list,True) 的注释，将 list 转换为字典之后再运行，时间大约为 8.375 seconds，效率大概提高了一半。因此在需要多数据成员进行频繁的查找或者访问的时候，使用 dict 而不是 list 是一个较好的选择。&lt;/p&gt;
&lt;h2 id=&quot;集合-set-与列表-list&quot;&gt;&lt;a href=&quot;#集合-set-与列表-list&quot; class=&quot;headerlink&quot; title=&quot;集合 (set) 与列表 (list)&quot;&gt;&lt;/a&gt;集合 (set) 与列表 (list)&lt;/h2&gt;&lt;p&gt;set 的 union， intersection，difference 操作要比 list 的迭代要快。因此如果涉及到求 list 交集，并集或者差的问题可以转换为 set 来操作。&lt;/p&gt;
&lt;p&gt;清单 2. 求 list 的交集：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = time() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lista=[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;listb=[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intersection=[] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range (&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;): &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; lista: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; b &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; listb: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a == b: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                intersection.append(a) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;total run time:&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; (time()-t)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上述程序的运行时间大概为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;total run time: 
38.4070000648
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;清单 3. 使用 set 求交集&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = time() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lista=[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;listb=[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intersection=[] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range (&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;): &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list(set(lista)&amp;amp;set(listb)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;total run time:&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(time()-t)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;改为 set 后程序的运行时间缩减为 8.75，提高了 4 倍多，运行时间大大缩短。读者可以自行使用表 1 其他的操作进行测试。&lt;br&gt;表 1. set 常见用法&lt;br&gt;语法    操作    说明&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set(list1) | set(list2)    union    包含 list1 和 list2 所有数据的新集合
set(list1) &amp;amp; set(list2)    intersection    包含 list1 和 list2 中共同元素的新集合
set(list1) - set(list2)    difference    在 list1 中出现但不在 list2 中出现的元素的集合
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;清单 4. 利用 Lazy if-evaluation 的特性&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = time() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abbreviations = [&lt;span class=&quot;string&quot;&gt;&#39;cf.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;e.g.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ex.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;etc.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;fig.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;i.e.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Mr.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;vs.&#39;&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range (&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;): &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; w &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Mr.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Hat&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;is&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;chasing&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;the&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;black&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cat&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;): &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; w &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; abbreviations: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#if w[-1] == &#39;.&#39; and w in abbreviations: &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;total run time:&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(time()-t)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在未进行优化之前程序的运行时间大概为 8.84，如果使用注释行代替第一个 if，运行的时间大概为 6.17。&lt;/p&gt;
&lt;h2 id=&quot;字符串的优化&quot;&gt;&lt;a href=&quot;#字符串的优化&quot; class=&quot;headerlink&quot; title=&quot;字符串的优化&quot;&gt;&lt;/a&gt;字符串的优化&lt;/h2&gt;&lt;p&gt;python 中的字符串对象是不可改变的，因此对任何字符串的操作如拼接，修改等都将产生一个新的字符串对象，而不是基于原字符串，因此这种持续的 copy 会在一定程度上影响 python 的性能。对字符串的优化也是改善性能的一个重要的方面，特别是在处理文本较多的情况下。字符串的优化主要集中在以下几个方面：&lt;/p&gt;
&lt;p&gt;在字符串连接的使用尽量使用 join() 而不是 +：在代码清单 7 中使用 + 进行字符串连接大概需要 0.125 s，而使用 join 缩短为 0.016s。因此在字符的操作上 join 比 + 要快，因此要尽量使用 join 而不是 +。&lt;/p&gt;
&lt;p&gt;清单 5. 使用 join 而不是 + 连接字符串&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = time() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list = [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;g&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;h&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;i&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;j&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;k&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;l&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;m&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;n&#39;&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range (&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;): &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; substr &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; list: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s+= substr     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;total run time:&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(time()-t)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同时要避免：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; list: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   s += func(x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而是要使用：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slist = [func(elt) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; elt &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; somelist] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;.join(slist)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当对字符串可以使用正则表达式或者内置函数来处理的时候，选择内置函数。如 str.isalpha()，str.isdigit()，str.startswith((‘x’, ‘yz’))，str.endswith((‘x’, ‘yz’))&lt;br&gt;对字符进行格式化比直接串联读取要快，因此要使用&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;out = &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;html&amp;gt;%s%s%s%s&amp;lt;/html&amp;gt;&quot;&lt;/span&gt; % (head, prologue, query, tail)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而避免&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;out = &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;html&amp;gt;&quot;&lt;/span&gt; + head + prologue + query + tail + &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;其他优化技巧&quot;&gt;&lt;a href=&quot;#其他优化技巧&quot; class=&quot;headerlink&quot; title=&quot;其他优化技巧&quot;&gt;&lt;/a&gt;其他优化技巧&lt;/h2&gt;&lt;p&gt;如果需要交换两个变量的值使用 a,b=b,a 而不是借助中间变量 t=a;a=b;b=t；&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; timeit &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Timer &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Timer(&lt;span class=&quot;string&quot;&gt;&quot;t=a;a=b;b=t&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;a=1;b=2&quot;&lt;/span&gt;).timeit() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0.25154118749729365&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Timer(&lt;span class=&quot;string&quot;&gt;&quot;a,b=b,a&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;a=1;b=2&quot;&lt;/span&gt;).timeit() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0.17156677734181258&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用局部变量，避免”global” 关键字。python 访问局部变量会比全局变量要快得多，因 此可以利用这一特性提升性能。&lt;/li&gt;
&lt;li&gt;if done is not None 比语句 if done != None 更快，读者可以自行验证；&lt;/li&gt;
&lt;li&gt;在耗时较多的循环中，可以把函数的调用改为内联的方式；&lt;/li&gt;
&lt;li&gt;使用级联比较 “x &amp;lt; y &amp;lt; z” 而不是 “x &amp;lt; y and y &amp;lt; z”；&lt;/li&gt;
&lt;li&gt;while 1 要比 while True 更快（当然后者的可读性更好）；&lt;/li&gt;
&lt;li&gt;build in 函数通常较快，add(a,b) 要优于 a+b。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python代码优化小技巧&quot;&gt;&lt;a href=&quot;#python代码优化小技巧&quot; class=&quot;headerlink&quot; title=&quot;python代码优化小技巧&quot;&gt;&lt;/a&gt;python代码优化小技巧&lt;/h1&gt;&lt;p&gt;一个良好的算法能够对性能起到关键作用，因此性能改进的首要点是对算法的改进。在算法的时间复杂度排序上依次是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; O(1) -&amp;gt; O(lg n) -&amp;gt; O(n lg n) -&amp;gt; O(n^2) -&amp;gt; O(n^3) -&amp;gt; O(n^k) -&amp;gt; O(k^n) -&amp;gt; O(n!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此如果能够在时间复杂度上对算法进行一定的改进，对性能的提高不言而喻。但对具体算法的改进不属于本文讨论的范围，读者可以自行参考这方面资料。下面的内容将集中讨论数据结构的选择。&lt;br&gt;
    
    </summary>
    
      <category term="code" scheme="http://adu.404nf.cn/categories/code/"/>
    
    
      <category term="代码优化" scheme="http://adu.404nf.cn/tags/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    
      <category term="python" scheme="http://adu.404nf.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>程序员工具（mac）</title>
    <link href="http://adu.404nf.cn/2016/03/24/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B7%A5%E5%85%B7%EF%BC%88mac%EF%BC%89/"/>
    <id>http://adu.404nf.cn/2016/03/24/程序员工具（mac）/</id>
    <published>2016-03-24T14:26:14.000Z</published>
    <updated>2016-03-31T14:38:40.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;mac下有关的程序员工具&quot;&gt;&lt;a href=&quot;#mac下有关的程序员工具&quot; class=&quot;headerlink&quot; title=&quot;mac下有关的程序员工具&quot;&gt;&lt;/a&gt;mac下有关的程序员工具&lt;/h1&gt;&lt;h2 id=&quot;item2&quot;&gt;&lt;a href=&quot;#item2&quot; class=&quot;headerlink&quot; title=&quot;item2&quot;&gt;&lt;/a&gt;item2&lt;/h2&gt;&lt;p&gt;代替苹果自带的终端，好看，而且功能更丰富。&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://www.iterm2.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.iterm2.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Oh-My-Zsh&quot;&gt;&lt;a href=&quot;#Oh-My-Zsh&quot; class=&quot;headerlink&quot; title=&quot;Oh-My-Zsh&quot;&gt;&lt;/a&gt;Oh-My-Zsh&lt;/h2&gt;&lt;p&gt;一款功能更加强大的shell。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;自动安装：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;手动安装：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mac下有关的程序员工具&quot;&gt;&lt;a href=&quot;#mac下有关的程序员工具&quot; class=&quot;headerlink&quot; title=&quot;mac下有关的程序员工具&quot;&gt;&lt;/a&gt;mac下有关的程序员工具&lt;/h1&gt;&lt;h2 id=&quot;item2&quot;&gt;&lt;a href=&quot;#item2&quot; class=&quot;headerlink&quot; title=&quot;item2&quot;&gt;&lt;/a&gt;item2&lt;/h2&gt;&lt;p&gt;代替苹果自带的终端，好看，而且功能更丰富。&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://www.iterm2.com/&quot;&gt;https://www.iterm2.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Oh-My-Zsh&quot;&gt;&lt;a href=&quot;#Oh-My-Zsh&quot; class=&quot;headerlink&quot; title=&quot;Oh-My-Zsh&quot;&gt;&lt;/a&gt;Oh-My-Zsh&lt;/h2&gt;&lt;p&gt;一款功能更加强大的shell。&lt;br&gt;
    
    </summary>
    
      <category term="worker" scheme="http://adu.404nf.cn/categories/worker/"/>
    
    
      <category term="工具" scheme="http://adu.404nf.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>程序员工具（windows）</title>
    <link href="http://adu.404nf.cn/2016/03/24/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B7%A5%E5%85%B7%EF%BC%88windows%EF%BC%89/"/>
    <id>http://adu.404nf.cn/2016/03/24/程序员工具（windows）/</id>
    <published>2016-03-24T13:31:48.000Z</published>
    <updated>2016-03-31T14:38:50.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;windows下好用的程序员工具&quot;&gt;&lt;a href=&quot;#windows下好用的程序员工具&quot; class=&quot;headerlink&quot; title=&quot;windows下好用的程序员工具&quot;&gt;&lt;/a&gt;windows下好用的程序员工具&lt;/h1&gt;&lt;h2 id=&quot;Lanuchy&quot;&gt;&lt;a href=&quot;#Lanuchy&quot; class=&quot;headerlink&quot; title=&quot;Lanuchy&quot;&gt;&lt;/a&gt;Lanuchy&lt;/h2&gt;&lt;p&gt;代替mac的Spotlight，虽然功能没有Spotlight完善，但还是非常好用，比如可以执行kill命令结束掉进程，可以快捷运行应用程序，还可以做简单的计算器使用。&lt;/p&gt;
&lt;h2 id=&quot;everything&quot;&gt;&lt;a href=&quot;#everything&quot; class=&quot;headerlink&quot; title=&quot;everything&quot;&gt;&lt;/a&gt;everything&lt;/h2&gt;&lt;p&gt;作为一款开源的强大的windows文件查询软件，它将系统中所有文件名保存成一个字典，可以迅速查询系统内文件，比windows自带的搜索功能不知道好用多少倍。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;InternetDownloadManager&quot;&gt;&lt;a href=&quot;#InternetDownloadManager&quot; class=&quot;headerlink&quot; title=&quot;InternetDownloadManager&quot;&gt;&lt;/a&gt;InternetDownloadManager&lt;/h2&gt;&lt;p&gt;面对迅雷日益臃肿，浏览器自带下载功能残废的今天，你需要一款轻巧，支持断点续传的下载器，IDM是不二人选。&lt;/p&gt;
&lt;h2 id=&quot;关于数据库&quot;&gt;&lt;a href=&quot;#关于数据库&quot; class=&quot;headerlink&quot; title=&quot;关于数据库&quot;&gt;&lt;/a&gt;关于数据库&lt;/h2&gt;&lt;p&gt;&lt;code&gt;navicat premium&lt;/code&gt;&lt;br&gt;可以支持多种数据库：MySQL、MariaDB、SQL Server、SQLite、Oracle 和 PostgreSQL ，功能强大，操作便捷。&lt;/p&gt;
&lt;h3 id=&quot;关于浏览器&quot;&gt;&lt;a href=&quot;#关于浏览器&quot; class=&quot;headerlink&quot; title=&quot;关于浏览器&quot;&gt;&lt;/a&gt;关于浏览器&lt;/h3&gt;&lt;p&gt;&lt;code&gt;firefox&lt;/code&gt;&lt;br&gt;开发者工具很好看，可以换肤，恩，插件还可以。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chrom&lt;/code&gt;&lt;br&gt;毫无疑问是因为Chrome的网上应用商店，还有他的断点调试功能比较方便，但个人觉得它的开发者工具没有火狐好用。&lt;/p&gt;
&lt;h2 id=&quot;SUblimen-Text-3&quot;&gt;&lt;a href=&quot;#SUblimen-Text-3&quot; class=&quot;headerlink&quot; title=&quot;SUblimen Text 3&quot;&gt;&lt;/a&gt;SUblimen Text 3&lt;/h2&gt;&lt;p&gt;之所以把Sublime作为一款软件来说是因为他是windows下兼顾GUI和性能比较理想的一款文本编辑器，windows自带的记事本和Word会在文件头加BOOM标记所以不推荐在写代码时使用，最理想的还是Sublime。&lt;br&gt;下面附上Sublime的一些常见设置：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;bold_folder_labels&quot;&lt;/span&gt;: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;color_scheme&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Packages/User/Monokai (SublimePythonIDE).tmTheme&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;create_window_at_startup&quot;&lt;/span&gt;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;default_encoding&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;ensure_newline_at_eof_on_save&quot;&lt;/span&gt;: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;font_size&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;highlight_modified_tabs&quot;&lt;/span&gt;: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;hot_exit&quot;&lt;/span&gt;: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;ignored_packages&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;Vintage&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;open_files_in_new_window&quot;&lt;/span&gt;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;remember_full_screen&quot;&lt;/span&gt;: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;remember_open_files&quot;&lt;/span&gt;: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;tab_size&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;translate_tabs_to_spaces&quot;&lt;/span&gt;: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;trim_trailing_white_space_on_save&quot;&lt;/span&gt;: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;= = 都是英文相信你应该看得懂，我就不写注释了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果看不懂。。出门左转下个[有道词典](http://cidian.youdao.com/multi.html)吧。
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;windows下好用的程序员工具&quot;&gt;&lt;a href=&quot;#windows下好用的程序员工具&quot; class=&quot;headerlink&quot; title=&quot;windows下好用的程序员工具&quot;&gt;&lt;/a&gt;windows下好用的程序员工具&lt;/h1&gt;&lt;h2 id=&quot;Lanuchy&quot;&gt;&lt;a href=&quot;#Lanuchy&quot; class=&quot;headerlink&quot; title=&quot;Lanuchy&quot;&gt;&lt;/a&gt;Lanuchy&lt;/h2&gt;&lt;p&gt;代替mac的Spotlight，虽然功能没有Spotlight完善，但还是非常好用，比如可以执行kill命令结束掉进程，可以快捷运行应用程序，还可以做简单的计算器使用。&lt;/p&gt;
&lt;h2 id=&quot;everything&quot;&gt;&lt;a href=&quot;#everything&quot; class=&quot;headerlink&quot; title=&quot;everything&quot;&gt;&lt;/a&gt;everything&lt;/h2&gt;&lt;p&gt;作为一款开源的强大的windows文件查询软件，它将系统中所有文件名保存成一个字典，可以迅速查询系统内文件，比windows自带的搜索功能不知道好用多少倍。&lt;br&gt;
    
    </summary>
    
      <category term="worker" scheme="http://adu.404nf.cn/categories/worker/"/>
    
    
      <category term="工具" scheme="http://adu.404nf.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://adu.404nf.cn/2016/03/23/hello-world/"/>
    <id>http://adu.404nf.cn/2016/03/23/hello-world/</id>
    <published>2016-03-23T12:33:46.000Z</published>
    <updated>2016-03-31T14:27:35.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
